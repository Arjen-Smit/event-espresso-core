{"version":3,"sources":["../domains/eventEditor/src/ui/datetimes/DateRegistrationsLink.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateCardSidebar.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateDetailsPanel.tsx","../domains/eventEditor/src/ui/datetimes/hooks/useDateCardDetailsItems.ts","../domains/eventEditor/src/ui/datetimes/datesList/cardView/Details.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateCard.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/CardView.tsx"],"names":["DateRegistrationsLink","datetime","regListUrl","useRegistrationsLink","datetime_id","dbId","tooltip","__","href","DateCapacity","entity","updateEntity","useDatetimeMutator","id","updateRelatedTickets","useUpdateRelatedTickets","ticketQuantityForCapacity","useTicketQuantityForCapacity","onChange","useCallback","cap","capacity","parseInfinity","inputGenerator","value","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","menuItems","EditableName","className","view","dateName","name","lineCount","onChangeName","tag","DateCardSidebar","date","displayStartOrEndDate","useDatesListFilterState","siteTimeToUtc","useTimeZoneTime","start","end","startDate","toISOString","endDate","statusText","getDatetimeStatusTextLabel","displayDate","header","popoverPlacement","DateDetailsPanel","adminUrl","eventId","details","useMemo","label","sold","type","useDateCardDetailsItems","datetimeId","useEntityCardDetailsItems","Details","siteUrl","useConfig","getAdminUrl","adminSiteUrl","admin","page","ADMIN_ROUTES","REGISTRATIONS","useEventId","onUpdate","description","detailsItems","additionalProps","hooks","applyFilters","EMPTY_OBJECT","text","title","DateCard","useDatetimeItem","bgClassName","datetimeStatusBgColorClassName","actionsMenu","layout","EntityActionsMenuLayout","Vertical","sidebar","sidebarClass","CardView","filteredDateIds","useFilteredDateIds","EntityCard","entityIds"],"mappings":"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","file":"static/js/dates-card-view.4683ed2f.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nconst DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId });\n\n\tconst tooltip = __('view ALL registrations for this date.');\n\n\treturn <RegistrationsLink href={regListUrl} tooltip={tooltip} />;\n};\n\nexport default DateRegistrationsLink;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport {\n\tuseDatetimeMutator,\n\tuseUpdateRelatedTickets,\n\tuseTicketQuantityForCapacity,\n} from '@eventespresso/edtr-services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst updateRelatedTickets = useUpdateRelatedTickets(datetime.id);\n\tconst ticketQuantityForCapacity = useTicketQuantityForCapacity();\n\n\tconst onChange: InlineEditProps['onChange'] = useCallback(\n\t\t(cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tupdateEntity({ capacity });\n\n\t\t\t\tconst inputGenerator = ticketQuantityForCapacity(capacity);\n\t\t\t\tupdateRelatedTickets(inputGenerator);\n\t\t\t}\n\t\t},\n\t\t[datetime.capacity, updateEntity, ticketQuantityForCapacity, updateRelatedTickets]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit capacity (registration limit)…')}\n\t\t\tvalue={`${datetime.capacity}`}\n\t\t/>\n\t);\n};\n\nexport default DateCapacity;\n","import type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '../../../hooks/entityActionsMenu';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\n\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default DateActionsMenu;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\nimport type { DateItemProps } from '../types';\n\ninterface EditableNameProps extends DateItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({ className, entity: datetime, view = 'card' }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst tooltip = __('edit title…');\n\n\tconst dateName = datetime.name || tooltip;\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={dateName}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getDatetimeStatusTextLabel } from '@eventespresso/helpers';\nimport { useDatesListFilterState } from '@eventespresso/edtr-services';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\nimport type { DateItemProps } from '../types';\n\nconst DateCardSidebar: React.FC<DateItemProps> = ({ entity: date }) => {\n\tconst { displayStartOrEndDate } = useDatesListFilterState();\n\tconst { updateEntity } = useDatetimeMutator(date.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getDatetimeStatusTextLabel(date);\n\n\treturn date ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tendDate={date.endDate}\n\t\t\t\tstartDate={date.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={date.endDate}\n\t\t\t\theader={__('Edit Event Date')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='right-end'\n\t\t\t\tstartDate={date.startDate}\n\t\t\t\ttooltip={__('edit start and end dates')}\n\t\t\t/>\n\t\t\t<div className={'ee-ticket-status-label'}>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default DateCardSidebar;\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityDetailsPanel, EntityDetailsPanelSold } from '@eventespresso/ui-components';\nimport DateRegistrationsLink from '../../DateRegistrationsLink';\nimport DateCapacity from './DateCapacity';\nimport type { DateItemProps } from '../types';\n\nconst DateDetailsPanel: React.FC<DateItemProps> = ({ adminUrl, entity: datetime, eventId }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: (\n\t\t\t\t\t<EntityDetailsPanelSold\n\t\t\t\t\t\tadminUrl={adminUrl}\n\t\t\t\t\t\tdbId={datetime.dbId}\n\t\t\t\t\t\teventId={eventId}\n\t\t\t\t\t\tsold={datetime.sold}\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-capacity',\n\t\t\t\tlabel: __('capacity'),\n\t\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-event-date-registrations',\n\t\t\t\tclassName: 'ee-has-tooltip',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t\t},\n\t\t],\n\t\t[adminUrl, datetime, eventId]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-date-details-sold-rsrvd-cap-div' />;\n};\n\nexport default DateDetailsPanel;\n","import type { EntityId } from '@eventespresso/data';\nimport { useEntityCardDetailsItems } from '@edtrHooks/index';\n\nconst useDateCardDetailsItems = (datetimeId: EntityId): Array<React.ReactNode> => {\n\treturn useEntityCardDetailsItems('datetime', datetimeId);\n};\n\nexport default useDateCardDetailsItems;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { ADMIN_ROUTES, EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useConfig } from '@eventespresso/services';\nimport { getAdminUrl, useDatetimeMutator, useEventId, hooks } from '@eventespresso/edtr-services';\n\nimport DateDetailsPanel from './DateDetailsPanel';\nimport { EditableName } from '../editable';\nimport useDateCardDetailsItems from '../../hooks/useDateCardDetailsItems';\nimport type { DateItemProps } from '../types';\n\nconst Details: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { siteUrl } = useConfig();\n\n\tconst adminUrl = useMemo(() => {\n\t\treturn getAdminUrl({ adminSiteUrl: siteUrl.admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\t}, [siteUrl.admin]);\n\n\tconst eventId = useEventId();\n\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst detailsItems = useDateCardDetailsItems(datetime.id);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.datetimes.inlineDescriptionProps', EMPTY_OBJECT, datetime);\n\t}, [datetime]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className='entity-card-details__name' entity={datetime} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={datetime.description}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t{detailsItems}\n\n\t\t\t<DateDetailsPanel adminUrl={adminUrl} entity={datetime} eventId={eventId} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { EntityActionsMenuLayout } from '@eventespresso/ui-components';\nimport { datetimeStatusBgColorClassName } from '@eventespresso/helpers';\nimport { EntityCard } from '@eventespresso/ui-components';\nimport { useDatetimeItem } from '@eventespresso/edtr-services';\n\nimport DateActionsMenu from '../actionsMenu/DateActionsMenu';\nimport DateCardSidebar from './DateCardSidebar';\nimport Details from './Details';\nimport type { DateItemProps } from '../types';\n\nconst DateCard: React.FC<DateItemProps> = ({ id }) => {\n\tconst date = useDatetimeItem({ id });\n\tconst bgClassName = datetimeStatusBgColorClassName(date);\n\n\treturn date ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<DateActionsMenu entity={date} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tdetails={<Details entity={date} />}\n\t\t\tentity={date}\n\t\t\tsidebar={<DateCardSidebar entity={date} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default DateCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredDateIds } from '@eventespresso/edtr-services';\n\nimport DateCard from './DateCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredDateIds = useFilteredDateIds();\n\n\treturn <EntityCardList EntityCard={DateCard} entityIds={filteredDateIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}