{"version":3,"sources":["../node_modules/ramda/es/reduce.js","../node_modules/ramda/es/internal/_checkForMethod.js","../domains/core/admin/eventEditor/src/ui/datetimes/DateRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/Checkbox.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/useBodyRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/useHeaderRowGenerator.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/formValidation.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/useBulkEditFormConfig.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/useSubmitForm.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/details/EditDetails.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/delete/useOnDelete.ts","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/delete/Delete.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/bulkEdit/actions/Actions.tsx","../domains/core/admin/eventEditor/src/ui/datetimes/datesList/tableView/TableView.tsx","../node_modules/ramda/es/slice.js","../node_modules/ramda/es/internal/_pipe.js","../node_modules/ramda/es/tail.js","../node_modules/ramda/es/pipe.js"],"names":["reduce","_curry3","_reduce","_checkForMethod","methodname","fn","length","arguments","obj","_isArray","apply","this","Array","prototype","slice","call","DateRegistrationsLink","datetime","regListUrl","useRegistrationsLink","datetime_id","dbId","tooltip","__","href","DateCapacity","entity","updateEntity","useDatetimeMutator","id","updateRelatedTickets","useUpdateRelatedTickets","ticketQuantityForCapacity","useTicketQuantityForCapacity","onChange","useCallback","cap","capacity","parseInfinity","inputGenerator","data-testid","value","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","menuItems","EditableName","className","testid","view","dateName","name","lineCount","onChangeName","tag","withFeature","useVisibleDatetimeIds","visibleDatetimeIds","visibleEntityIds","addZebraStripes","addZebraStripesOnMobile","useBodyRowGenerator","datetimes","useDatetimes","getDatetime","findEntityByGuid","getLazyDatetime","useLazyDatetime","format","useTimeZoneTime","formatForSite","entityId","filterState","displayStartOrEndDate","showBulkActions","bgClassName","getDatetimeBackgroundColorClassName","statusClassName","datetimeStatus","cellsData","classNames","key","showValueOnMobile","textAlign","size","parseISO","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","sold","filter","Boolean","filterCells","filterCellByStartOrEndDate","cells","pipe","rowClassName","type","useHeaderRowGenerator","stripeCell","useMemo","idCell","nameCell","startCell","endCell","capacityCell","soldCell","registrationsCell","actionsCell","primary","validate","values","a","yupToFinalFormErrors","validationSchema","yup","min","unitOptions","intervalsToOptions","pick","DATE_INTERVALS","useBulkEditFormConfig","config","onSubmit","onSubmitFrom","form","restParams","adjacentFormItemProps","useMemoStringify","layout","debugFields","sections","icon","ProfileOutlined","title","fields","label","fieldType","CalendarOutlined","formControlProps","subFields","options","ControlOutlined","parseAsInfinity","useSubmitForm","onClose","useBulkEdit","getSelected","unSelectAll","allDates","updateEntities","useBulkEditDatetimes","formData","input","formToBulkUpdateInput","EditDetails","isOpen","formConfig","warning","useOnDelete","areTrashedDates","bulkDelete","useBulkDeleteDatetimes","Delete","onDelete","useConfirmationDialog","message","onConfirm","onCancel","confirmationDialog","onOpen","useEffect","actions","useState","action","setAction","bulkEdit","useDisclosure","useDatesListFilterState","status","DatetimeStatus","trashedOnly","hooks","applyFilters","onApply","newAction","includes","doAction","show","Checkbox","defaultAction","withBulkEdit","filteredDateIds","useFilteredDateIds","bodyRowGenerator","headerRowGenerator","domain","entityIds","listId","datesList","tableCaption","tableId","fromIndex","toIndex","list","_pipe","f","g","tail","_curry1","Infinity","Error","_arity"],"mappings":"8FAAA,oBAiDIA,EAEJC,YAAQC,KAEOF,O,iCCrDf,8CAYe,SAASG,EAAgBC,EAAYC,GAClD,OAAO,WACL,IAAIC,EAASC,UAAUD,OAEvB,GAAe,IAAXA,EACF,OAAOD,IAGT,IAAIG,EAAMD,UAAUD,EAAS,GAC7B,OAAOG,YAASD,IAAmC,oBAApBA,EAAIJ,GAA6BC,EAAGK,MAAMC,KAAMJ,WAAaC,EAAIJ,GAAYM,MAAMF,EAAKI,MAAMC,UAAUC,MAAMC,KAAKR,UAAW,EAAGD,EAAS,O,kCCrB7K,kCAiBeU,IARgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAaC,+BAAqB,CAAEC,YAAaH,EAASI,OAE1DC,EAAUC,aAAG,yCAEnB,OAAO,cAAC,oBAAD,CAAmBC,KAAMN,EAAYI,QAASA,M,kCCdtD,iDA0CeG,IA7B+B,SAAC,GAA0B,IAAhBR,EAAe,EAAvBS,OACxCC,EAAiBC,6BAAmBX,EAASY,IAA7CF,aAEFG,EAAuBC,oCACvBC,EAA4BC,yCAE5BC,EAAwCC,uBAC7C,SAACC,GACA,IAAMC,EAAWC,wBAAcF,GAC/B,GAAIC,IAAapB,EAASoB,SAAU,CACnCV,EAAa,CAAEU,aAEf,IAAME,EAAiBP,EAA0BK,GACjDP,EAAqBb,EAASY,GAAIU,MAGpC,CAACtB,EAASoB,SAAUpB,EAASY,GAAIF,EAAcK,EAA2BF,IAG3E,OACC,cAAC,qBAAD,CACCU,cAAY,yBACZN,SAAUA,EACVZ,QAASC,aAAG,4CACZkB,MAAK,UAAKxB,EAASoB,c,qEC9BPK,EAJiB,SAACzB,GAChC,OAAO0B,YAA0B,WAAY1B,I,OCQ/B2B,IANwD,SAAC,GAA0B,IAAxBlB,EAAuB,EAAvBA,OAAWmB,EAAY,0BAC1FC,EAAYJ,EAAwBhB,GAE1C,OAAO,cAAC,oBAAD,2BAAuBmB,GAAvB,IAA8BC,UAAWA,O,6GCyClCC,EApCmC,SAAC,GAK5C,IAJNC,EAIK,EAJLA,UACeC,EAGV,EAHL,eACQhC,EAEH,EAFLS,OAEK,IADLwB,YACK,MADE,OACF,EACGvB,EAAiBC,6BAAmBX,EAASY,IAA7CF,aAEFL,EAAUC,aAAG,oBAEb4B,EAAWlC,EAASmC,MAAQ9B,EAE5B+B,EAAqB,SAATH,GAAmB,EAE/BI,EAAenB,uBACpB,SAACiB,GACIA,IAASnC,EAASmC,MACrBzB,EAAa,CAAEyB,WAGjB,CAACnC,EAASmC,KAAMzB,IAGjB,OACC,cAAC,iBAAD,CACCqB,UAAWA,EACXR,cAAaS,EACbI,UAAWA,EACXnB,SAAUoB,EACVC,IAAc,UAATL,EAAmB,MAAQ,KAChC5B,QAASA,EACTmB,MAAOU,M,6NClCKK,wBAAY,gBAAZA,EANiC,SAACX,GAAW,IAAD,EAC7BY,kCAAtBC,EADmD,oBAG1D,OAAO,cAAC,iBAAD,2BAAoBb,GAApB,IAA2Bc,iBAAkBD,QCgB/CE,EAAkBC,kCADR,CAAC,MAAO,SAAU,OAAQ,YAkI3BC,EA/Ha,WAC3B,IAAMC,EAAYC,yBACZC,EAAc9B,uBAAY,SAACN,GAAD,OAAkBqC,2BAAiBH,EAAjBG,CAA4BrC,KAAK,CAACkC,IAC9EI,EAAkBC,4BACDC,EAAWC,4BAA1BC,cAER,OAAOpC,uBACN,YAAgC,IAA7BqC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACNxD,EAAWgD,EAAYO,IAAaL,EAAgBK,GAElDE,EAA2CD,EAA3CC,sBAAuBC,EAAoBF,EAApBE,gBAEzBC,EAAcC,8CAAoC5D,GAClDY,EAAKZ,EAASI,MAAQ,EACtByD,EAAkBC,yBAAe9D,GA+EjC+D,EAA6B,CA7EN,CAC5BhC,UAAWiC,IAAW,+BAAgCL,GACtDM,IAAK,SACLC,mBAAmB,EACnBC,UAAW,SACX3C,MAAOxB,EAASmC,MAGwBuB,GAAmB,CAC3DO,IAAK,OACLG,KAAM,QACND,UAAW,SACX3C,MAAO,cAAC,EAAD,CAAUpB,KAAMJ,EAASI,KAAMQ,GAAIZ,EAASY,MAG3B,CACxBqD,IAAK,KACLG,KAAM,QACND,UAAW,MACX3C,MAAOZ,GAGmB,CAC1BmB,UAAW,6CACXkC,IAAK,OACLG,KAAM,OACN5C,MACC,cAAC,IAAD,CACCO,UAAU,yDACVR,cAAA,2CAAiDvB,EAASI,MAC1DK,OAAQT,EACRiC,KAAK,WAKoB,CAC3BgC,IAAK,QACLG,KAAM,UACN5C,MAAO4B,EAAOiB,kBAASrE,EAASsE,WAAYC,iCAGnB,CACzBN,IAAK,MACLG,KAAM,UACN5C,MAAO4B,EAAOiB,kBAASrE,EAASwE,SAAUD,iCAGZ,CAC9BxC,UAAW,sBACXkC,IAAK,WACLG,KAAM,OACND,UAAW,MACX3C,MAAO,cAAChB,EAAA,EAAD,CAAcC,OAAQT,KAGH,CAC1BiE,IAAK,OACLG,KAAM,OACND,UAAW,MACX3C,MAAOxB,EAASyE,MAAQ,GAGW,CACnCR,IAAK,gBACLG,KAAM,UACND,UAAW,SACX3C,MAAO,cAACzB,EAAA,EAAD,CAAuBC,SAAUA,KAGX,CAC7BiE,IAAK,UACLG,KAAM,MACND,UAAW,SACX3C,MAAO,cAACG,EAAA,EAAD,CAAiBlB,OAAQT,MAc/B0E,OAEDC,SAGKC,EAAcF,YAAOG,qCAA2BpB,IAItD,MAAO,CACNqB,MAHaC,YAAKH,EAAajC,EAAlBoC,CAAmChB,GAIhDhC,UAAW8B,EACX,cAAc,6BAAd,OAA4C7D,EAASI,MACrDQ,GAAG,oCAAD,OAAsCZ,EAASY,IACjDqD,IAAI,OAAD,OAASjE,EAASY,IACrBoE,aAAc,sBACdC,KAAM,SAGR,CAAC7B,EAAQJ,EAAaE,KC0BTgC,EAlKe,WAC7B,IAAMC,EAAuBC,mBAC5B,iBAAO,CACNrD,UAAW,+BACXkC,IAAK,SACLG,KAAM,OACND,UAAW,SACX3C,MAAO,MAER,IAGK6D,EAAmBD,mBACxB,iBAAO,CACNnB,IAAK,KACLG,KAAM,QACND,UAAW,MACX3C,MAAOlB,aAAG,SAEX,IAGKgF,EAAqBF,mBAC1B,iBAAO,CACNnB,IAAK,OACLG,KAAM,OACN5C,MAAOlB,aAAG,WAEX,IAGKiF,EAAsBH,mBAC3B,iBAAO,CACNnB,IAAK,QACLG,KAAM,UACN5C,MACC,qCACC,sBAAMO,UAAW,6BAAjB,SAAgDzB,aAAG,gBACnD,sBAAMyB,UAAW,8BAAjB,SAAiDzB,aAAG,iBAIvD,IAGKkF,EAAoBJ,mBACzB,iBAAO,CACNnB,IAAK,MACLG,KAAM,UACN5C,MACC,qCACC,sBAAMO,UAAW,6BAAjB,SAAgDzB,aAAG,cACnD,sBAAMyB,UAAW,8BAAjB,SAAiDzB,aAAG,eAIvD,IAGKmF,EAAyBL,mBAC9B,iBAAO,CACNrD,UAAW,sBACXkC,IAAK,WACLG,KAAM,OACND,UAAW,MACX3C,MACC,qCACC,sBAAMO,UAAW,6BAAjB,SAAgDzB,aAAG,cACnD,sBAAMyB,UAAW,8BAAjB,SAAiDzB,aAAG,eAIvD,IAGKoF,EAAqBN,mBAC1B,iBAAO,CACNnB,IAAK,OACLG,KAAM,OACND,UAAW,MACX3C,MAAOlB,aAAG,WAEX,IAGKqF,EAA8BP,mBACnC,iBAAO,CACNnB,IAAK,gBACLG,KAAM,UACND,UAAW,SACX3C,MACC,qCACC,sBAAMO,UAAW,6BAAjB,SAAgDzB,aAAG,cACnD,sBAAMyB,UAAW,8BAAjB,SAAiDzB,aAAG,gBAIvD,IAGKsF,EAAwBR,mBAC7B,iBAAO,CACNnB,IAAK,UACLG,KAAM,MACND,UAAW,SACX3C,MACC,qCACC,sBAAMO,UAAW,6BAAjB,SAAgDzB,aAAG,aACnD,sBAAMyB,UAAW,8BAAjB,SAAiDzB,aAAG,mBAIvD,IAGD,OAAOY,uBACN,SAACsC,GAAiB,IACTC,EAA2CD,EAA3CC,sBAAuBC,EAAoBF,EAApBE,gBAiC/B,MAAO,CACNoB,MArBkC,CAClCK,EAZ8BzB,GAAmB,CACjDO,IAAK,WACLG,KAAM,QACND,UAAW,SACX3C,MACC,qBAAKO,UAAW,iCAAhB,SACC,cAAC,EAAD,OAQFsD,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAIClB,OAEAC,SAEAD,OAAOG,qCAA2BpB,IAInC1B,UAAW,uCACXkC,IAAK,oBACL4B,SAAS,EACTZ,KAAM,SAGR,CAACW,EAAaH,EAAcD,EAASH,EAAQC,EAAUK,EAAmBD,EAAUH,EAAWJ,K,kGCrKpFW,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACVC,+BAAqBC,EAAkBH,GAD7B,mFAAH,sDAIfG,EAAmBC,IAAW,CACnChE,KAAMgE,MAAaC,IAAI,GAAG,kBAAM9F,aAAG,+CCG9B+F,EAAcC,6BACnBC,YAAiC,CAAC,SAAU,QAAS,OAAQ,QAAS,WAAYC,mBAClF,GA6GcC,EA1Ge,SAACC,GAAmE,IACzFC,EAAaD,EAAbC,SAEFC,EAA2C1F,uBAChD,SAAC6E,EAAQc,GAAyB,IAAD,uBAAfC,EAAe,iCAAfA,EAAe,kBAChC,OAAOH,EAAQ,WAAR,GAASZ,EAAQc,GAAjB,OAA0BC,MAElC,CAACH,IAGII,EAAwBC,2BAAiB,CAC9CjF,UAAW,sBAGZ,OAAOqD,mBACN,8BAAC,eACGsB,GADJ,IAECC,SAAUC,EACVd,WACAmB,OAAQ,aACRC,YAAa,CAAC,SAAU,UACxBC,SAAU,CACT,CACChF,KAAM,SACNiF,KAAMC,IACNC,MAAOhH,aAAG,UACViH,OAAQ,CACP,CACCpF,KAAM,OACNqF,MAAOlH,aAAG,QACVmH,UAAW,OACXrB,IAAK,GAEN,CACCjE,KAAM,cACNqF,MAAOlH,aAAG,eACVmH,UAAW,wBAId,CACCtF,KAAM,QACNiF,KAAMM,IACNJ,MAAOhH,aAAG,SACViH,OAAQ,CACP,CACCpF,KAAM,aACNqF,MAAOlH,aAAG,eACVmH,UAAW,QACXE,iBAAkB,CACjB5F,UAAW,eAEZ6F,UAAW,CACV,CACCzF,KAAM,QACNsF,UAAW,SACXrB,IAAK,GAEN,CACCjE,KAAM,OACNsF,UAAW,SACXI,QAASxB,GAEV,CACClE,KAAM,OACNsF,UAAW,SACXI,QAAS,CACR,CACCL,MAAO,GACPhG,MAAO,IAER,CACCgG,MAAOlH,aAAG,WACVkB,MAAO,WAER,CACCgG,MAAOlH,aAAG,SACVkB,MAAO,eAQd,CACCW,KAAM,UACNiF,KAAMU,IACNR,MAAOhH,aAAG,WACViH,OAAQ,CACP,CACCpF,KAAM,WACNqF,MAAOlH,aAAG,YACVmH,UAAW,SACXM,iBAAiB,EACjB3B,KAAM,EACNuB,iBAAkBZ,UAMvB,CAACA,EAAuBL,EAAQE,KC7FnBoB,EAnBO,SAACC,GAAqC,IAAD,EACrBC,wBAA7BC,EADkD,EAClDA,YAAaC,EADqC,EACrCA,YACfC,EAAWtF,yBACTuF,EAAmBC,iCAAnBD,eACR,OAAOpH,uBACN,SAACsH,GAEAP,IAEAG,IAEA,IAAMK,EAAQC,gCAAsBF,EAAUH,EAAUF,KAExDG,EAAeG,KAEhB,CAACJ,EAAUF,EAAaF,EAASG,EAAaE,KCEjCK,EAfiC,SAAC,GAAyB,IAAvBV,EAAsB,EAAtBA,QAASW,EAAa,EAAbA,OACrDjC,EAAWqB,EAAcC,GACzBY,EAAapC,EAAsB,CAAEE,aAE3C,OACC,cAAC,kBAAD,CACCkC,WAAYA,EACZD,OAAQA,EACRX,QAASA,EACTX,MAAOhH,aAAG,0BACVwI,QAASxI,aAAG,gECEAyI,EAde,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBf,EAAc,EAAdA,QAAc,EAC1BC,wBAA7BC,EADuD,EACvDA,YAAaC,EAD0C,EAC1CA,YACfa,EAAaC,mCACnB,OAAOhI,uBAA0B,WAEhC+G,IAEAG,IAGAa,EAAWd,IAAea,KACxB,CAACA,EAAiBC,EAAYd,EAAaF,EAASG,KCMzCe,EAlByB,SAAC,GAAkC,IAAhCH,EAA+B,EAA/BA,gBAAiBf,EAAc,EAAdA,QACrDmB,EAAWL,EAAY,CAAEC,kBAAiBf,YADyB,EAGlCoB,gCAAsB,CAC5DC,QAASN,EACN1I,aAAG,+FACHA,aAAG,mDACNgH,MAAO0B,EAAkB1I,aAAG,gCAAkCA,aAAG,mBACjEiJ,UAAWH,EACXI,SAAUvB,IANHwB,EAHiE,EAGjEA,mBAAoBC,EAH6C,EAG7CA,OAY5B,OAFAC,qBAAU,kBAAMD,MAAU,IAEnB,mCAAGD,KCJLG,EAAyB,CAAC,eAAgB,SAAU,IA4D3CrH,wBAAY,gBAAZA,EA1DW,WAAO,IAAD,EACHsH,mBAAiB,IADd,mBACxBC,EADwB,KAChBC,EADgB,KAEzBC,EAAW9B,wBAFc,EAIK+B,0BAA5BrB,EAJuB,EAIvBA,OAAQc,EAJe,EAIfA,OAAQzB,EAJO,EAIPA,QAJO,EAMKiC,oCAA5BC,EANuB,EAMvBA,OAAQzG,EANe,EAMfA,gBAEVsF,EAAkBmB,IAAWC,iBAAeC,YAE5CxC,EAAUb,2BACfsD,QAAMC,aAAa,yCAA0C,CAC5D,CACC/I,MAAO,GACPgG,MAAOlH,aAAG,iBAEX,CACCkB,MAAO,eACPgG,MAAOlH,aAAG,0BAEX,CACCkB,MAAO,SACPgG,MAAOwB,EAAkB1I,aAAG,oBAAsBA,aAAG,uBAKlDkK,EAAUtJ,uBACf,SAACuJ,GACAV,EAAUU,GAENb,EAAQc,SAASD,IACpBf,IAEDY,QAAMK,SAAS,uCAAwCF,EAAWT,KAEnE,CAACA,EAAUN,IAGZ,OACC,eAAC,cAAD,CAAakB,KAAMlH,EAAnB,UACC,cAAC,cAAD,CACCmH,SAAUA,EACVC,cAAc,GACdlK,GAAI,6BACJ4J,QAASA,EACT3C,QAASA,IAETe,GACA,qCACa,iBAAXkB,GAA6B,cAAC,EAAD,CAAalB,QAAQ,EAAMX,QAASA,IACtD,WAAX6B,GAAuB,cAAC,EAAD,CAAQd,gBAAiBA,EAAiBf,QAASA,aCjCjE8C,kCAxBa,WAC3B,IAAMvH,EAAc0G,oCACdc,EAAkBC,+BAElBC,EAAmBrI,IACnBsI,EAAqBjG,IAE3B,OACC,qCACC,cAAC,EAAD,IACA,cAAC,cAAD,CACCgG,iBAAkBA,EAClBE,OAAQA,SACRC,UAAWL,EACXxH,YAAaA,EACb2H,mBAAoBA,EACpBG,OAAQC,YACRC,aAAclL,aAAG,eACjBmL,QAAQ,oC,iCCjCZ,qBA2BI5L,EAEJb,YAEAE,YAAgB,SAAS,SAAewM,EAAWC,EAASC,GAC1D,OAAOjM,MAAMC,UAAUC,MAAMC,KAAK8L,EAAMF,EAAWC,OAGtC9L,O,+ECnCA,SAASgM,EAAMC,EAAGC,GAC/B,OAAO,WACL,OAAOA,EAAEjM,KAAKJ,KAAMoM,EAAErM,MAAMC,KAAMJ,a,uCCqCvB0M,EANfC,YAEA/M,YAAgB,OAEhBW,YAAM,EAAGqM,OCTM,SAASnH,IACtB,GAAyB,IAArBzF,UAAUD,OACZ,MAAM,IAAI8M,MAAM,uCAGlB,OAAOC,YAAO9M,UAAU,GAAGD,OAAQN,YAAO8M,EAAOvM,UAAU,GAAI0M,EAAK1M","file":"static/js/dates-table-view.0aa1551f.chunk.js","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport _reduce from \"./internal/_reduce.js\";\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\n\nvar reduce =\n/*#__PURE__*/\n_curry3(_reduce);\n\nexport default reduce;","import _isArray from \"./_isArray.js\";\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Datetime } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nconst DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst regListUrl = useRegistrationsLink({ datetime_id: datetime.dbId });\n\n\tconst tooltip = __('view ALL registrations for this date.');\n\n\treturn <RegistrationsLink href={regListUrl} tooltip={tooltip} />;\n};\n\nexport default DateRegistrationsLink;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport {\n\tuseDatetimeMutator,\n\tuseUpdateRelatedTickets,\n\tuseTicketQuantityForCapacity,\n} from '@eventespresso/edtr-services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst updateRelatedTickets = useUpdateRelatedTickets();\n\tconst ticketQuantityForCapacity = useTicketQuantityForCapacity();\n\n\tconst onChange: InlineEditProps['onChange'] = useCallback(\n\t\t(cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tupdateEntity({ capacity });\n\n\t\t\t\tconst inputGenerator = ticketQuantityForCapacity(capacity);\n\t\t\t\tupdateRelatedTickets(datetime.id, inputGenerator);\n\t\t\t}\n\t\t},\n\t\t[datetime.capacity, datetime.id, updateEntity, ticketQuantityForCapacity, updateRelatedTickets]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tdata-testid='ee-datetime-inline-cap'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit capacity (registration limit)…')}\n\t\t\tvalue={`${datetime.capacity}`}\n\t\t/>\n\t);\n};\n\nexport default DateCapacity;\n","import type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '../../../hooks/entityActionsMenu';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\n\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default DateActionsMenu;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\nimport type { DateItemProps } from '../types';\n\ninterface EditableNameProps extends DateItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: datetime,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst tooltip = __('edit title…');\n\n\tconst dateName = datetime.name || tooltip;\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={dateName}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { ActionCheckbox } from '@eventespresso/ee-components';\nimport { useVisibleDatetimeIds } from '@eventespresso/edtr-services';\nimport { withFeature } from '@eventespresso/services';\nimport type { ActionCheckboxProps } from '@eventespresso/ee-components';\n\nconst Checkbox: React.FC<ActionCheckboxProps> = (props) => {\n\tconst [visibleDatetimeIds] = useVisibleDatetimeIds();\n\n\treturn <ActionCheckbox {...props} visibleEntityIds={visibleDatetimeIds} />;\n};\n\nexport default withFeature('use_bulk_edit')(Checkbox);\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { parseISO } from 'date-fns';\nimport { filter, pipe } from 'ramda';\n\nimport { addZebraStripesOnMobile, CellData } from '@eventespresso/ui-components';\nimport { filterCellByStartOrEndDate, useDatetimes, useLazyDatetime } from '@eventespresso/edtr-services';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@eventespresso/constants';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport { getDatetimeBackgroundColorClassName, datetimeStatus } from '@eventespresso/helpers';\nimport { findEntityByGuid } from '@eventespresso/predicates';\nimport type { EntityId } from '@eventespresso/data';\nimport type { DatetimesFilterStateManager } from '@eventespresso/edtr-services';\nimport type { BodyRowGeneratorFn } from '@eventespresso/ee-components';\n\nimport DateRegistrationsLink from '../../DateRegistrationsLink';\nimport DateActionsMenu from '../../datesList/actionsMenu/DateActionsMenu';\nimport DateCapacity from '../cardView/DateCapacity';\nimport { EditableName } from '../editable';\nimport Checkbox from './Checkbox';\n\ntype DatesTableBodyRowGen = BodyRowGeneratorFn<DatetimesFilterStateManager>;\n\nconst exclude = ['row', 'stripe', 'name', 'actions'];\nconst addZebraStripes = addZebraStripesOnMobile(exclude);\n\nconst useBodyRowGenerator = (): DatesTableBodyRowGen => {\n\tconst datetimes = useDatetimes();\n\tconst getDatetime = useCallback((id: EntityId) => findEntityByGuid(datetimes)(id), [datetimes]);\n\tconst getLazyDatetime = useLazyDatetime();\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\treturn useCallback<DatesTableBodyRowGen>(\n\t\t({ entityId, filterState }) => {\n\t\t\tconst datetime = getDatetime(entityId) || getLazyDatetime(entityId);\n\n\t\t\tconst { displayStartOrEndDate, showBulkActions } = filterState;\n\n\t\t\tconst bgClassName = getDatetimeBackgroundColorClassName(datetime);\n\t\t\tconst id = datetime.dbId || 0;\n\t\t\tconst statusClassName = datetimeStatus(datetime);\n\n\t\t\tconst stripeCell: CellData = {\n\t\t\t\tclassName: classNames('ee-entity-list-status-stripe', bgClassName),\n\t\t\t\tkey: 'stripe',\n\t\t\t\tshowValueOnMobile: true,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: datetime.name,\n\t\t\t};\n\n\t\t\tconst bulkActionCheckboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'cell',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <Checkbox dbId={datetime.dbId} id={datetime.id} />,\n\t\t\t};\n\n\t\t\tconst idCell: CellData = {\n\t\t\t\tkey: 'id',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: id,\n\t\t\t};\n\n\t\t\tconst nameCell: CellData = {\n\t\t\t\tclassName: 'ee-col-name ee-rspnsv-table-hide-on-mobile',\n\t\t\t\tkey: 'name',\n\t\t\t\tsize: 'huge',\n\t\t\t\tvalue: (\n\t\t\t\t\t<EditableName\n\t\t\t\t\t\tclassName='ee-entity-name ee-entity-list-text ee-focus-priority-5'\n\t\t\t\t\t\tdata-testid={`ee-entity-list-view-row-editable-${datetime.dbId}`}\n\t\t\t\t\t\tentity={datetime}\n\t\t\t\t\t\tview='table'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst startCell: CellData = {\n\t\t\t\tkey: 'start',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(datetime.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst endCell: CellData = {\n\t\t\t\tkey: 'end',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(datetime.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst capacityCell: CellData = {\n\t\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\t\tkey: 'capacity',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t\t};\n\n\t\t\tconst soldCell: CellData = {\n\t\t\t\tkey: 'sold',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: datetime.sold || 0,\n\t\t\t};\n\n\t\t\tconst registrationsCell: CellData = {\n\t\t\t\tkey: 'registrations',\n\t\t\t\tsize: 'smaller',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t\t};\n\n\t\t\tconst actionsCell: CellData = {\n\t\t\t\tkey: 'actions',\n\t\t\t\tsize: 'big',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <DateActionsMenu entity={datetime} />,\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tbulkActionCheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tcapacityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t].filter(\n\t\t\t\t// removes falsy values\n\t\t\t\tBoolean\n\t\t\t);\n\n\t\t\tconst filterCells = filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\tconst cells = pipe(filterCells, addZebraStripes)(cellsData);\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: statusClassName,\n\t\t\t\t'data-testid': `ee-datetime-list-view-row-${datetime.dbId}`,\n\t\t\t\tid: `ee-editor-datetime-list-view-row-${datetime.id}`,\n\t\t\t\tkey: `row-${datetime.id}`,\n\t\t\t\trowClassName: 'ee-entity-list-item',\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[format, getDatetime, getLazyDatetime]\n\t);\n};\n\nexport default useBodyRowGenerator;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { filterCellByStartOrEndDate } from '@eventespresso/edtr-services';\n\nimport type { CellData } from '@eventespresso/ui-components';\nimport type { HeaderRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { DatetimesFilterStateManager } from '@eventespresso/edtr-services';\n\nimport Checkbox from './Checkbox';\n\ntype DatesTableHeaderRowGen = HeaderRowGeneratorFn<DatetimesFilterStateManager>;\n\nconst useHeaderRowGenerator = (): DatesTableHeaderRowGen => {\n\tconst stripeCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-entity-list-status-stripe',\n\t\t\tkey: 'stripe',\n\t\t\tsize: 'nano',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: '',\n\t\t}),\n\t\t[]\n\t);\n\n\tconst idCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'id',\n\t\t\tsize: 'micro',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('ID'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst nameCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'name',\n\t\t\tsize: 'huge',\n\t\t\tvalue: __('Name'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst startCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'start',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Start Date')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Start')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst endCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'end',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('End Date')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('End')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst capacityCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\tkey: 'capacity',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Capacity')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Cap')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst soldCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'sold',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Sold'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst registrationsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'registrations',\n\t\t\tsize: 'smaller',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Reg list')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Regs')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst actionsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'actions',\n\t\t\tsize: 'big',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Actions')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\treturn useCallback<DatesTableHeaderRowGen>(\n\t\t(filterState) => {\n\t\t\tconst { displayStartOrEndDate, showBulkActions } = filterState;\n\n\t\t\tconst checkboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'checkbox',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: (\n\t\t\t\t\t<div className={'ee-rspnsv-table-hide-on-mobile'}>\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tcheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tcapacityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t];\n\n\t\t\tconst cells = cellsData\n\t\t\t\t.filter(\n\t\t\t\t\t// removes falsy values\n\t\t\t\t\tBoolean\n\t\t\t\t)\n\t\t\t\t.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: 'ee-editor-date-list-items-header-row',\n\t\t\t\tkey: 'dates-list-header',\n\t\t\t\tprimary: true,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[actionsCell, capacityCell, endCell, idCell, nameCell, registrationsCell, soldCell, startCell, stripeCell]\n\t);\n};\n\nexport default useHeaderRowGenerator;\n","import { __ } from '@eventespresso/i18n';\nimport * as yup from 'yup';\n\nimport { yupToFinalFormErrors } from '@eventespresso/form';\nimport { BulkEditFormShape } from './types';\n\nexport const validate = async (values: BulkEditFormShape): Promise<any> => {\n\treturn await yupToFinalFormErrors(validationSchema, values);\n};\n\nconst validationSchema = yup.object({\n\tname: yup.string().min(3, () => __('Name must be at least three characters')),\n});\n","import { useMemo, useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\nimport { pick } from 'ramda';\n\nimport { CalendarOutlined, ControlOutlined, ProfileOutlined } from '@eventespresso/icons';\nimport { intervalsToOptions, Intervals, DATE_INTERVALS } from '@eventespresso/dates';\nimport type { EspressoFormProps } from '@eventespresso/form';\n\nimport { validate } from './formValidation';\nimport type { BulkEditFormShape } from './types';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\ntype DateFormConfig = EspressoFormProps<BulkEditFormShape>;\n\nconst unitOptions = intervalsToOptions(\n\tpick<Intervals, keyof Intervals>(['months', 'weeks', 'days', 'hours', 'minutes'], DATE_INTERVALS),\n\ttrue\n);\n\nconst useBulkEditFormConfig = (config?: EspressoFormProps<BulkEditFormShape>): DateFormConfig => {\n\tconst { onSubmit } = config;\n\n\tconst onSubmitFrom: DateFormConfig['onSubmit'] = useCallback(\n\t\t(values, form, ...restParams) => {\n\t\t\treturn onSubmit(values, form, ...restParams);\n\t\t},\n\t\t[onSubmit]\n\t);\n\n\tconst adjacentFormItemProps = useMemoStringify({\n\t\tclassName: 'ee-form-item-pair',\n\t});\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\t...config,\n\t\t\tonSubmit: onSubmitFrom,\n\t\t\tvalidate,\n\t\t\tlayout: 'horizontal',\n\t\t\tdebugFields: ['values', 'errors'],\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tname: 'basics',\n\t\t\t\t\ticon: ProfileOutlined,\n\t\t\t\t\ttitle: __('Basics'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tlabel: __('Name'),\n\t\t\t\t\t\t\tfieldType: 'text',\n\t\t\t\t\t\t\tmin: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\t\tlabel: __('Description'),\n\t\t\t\t\t\t\tfieldType: 'simple-text-editor',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'dates',\n\t\t\t\t\ticon: CalendarOutlined,\n\t\t\t\t\ttitle: __('Dates'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'shiftDates',\n\t\t\t\t\t\t\tlabel: __('Shift dates'),\n\t\t\t\t\t\t\tfieldType: 'group',\n\t\t\t\t\t\t\tformControlProps: {\n\t\t\t\t\t\t\t\tclassName: 'shift-dates',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsubFields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'unit',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: unitOptions,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('earlier'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'earlier',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('later'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'later',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'details',\n\t\t\t\t\ticon: ControlOutlined,\n\t\t\t\t\ttitle: __('Details'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'capacity',\n\t\t\t\t\t\t\tlabel: __('Capacity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\t[adjacentFormItemProps, config, onSubmitFrom]\n\t);\n};\n\nexport default useBulkEditFormConfig;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useDatetimes, useBulkEditDatetimes, formToBulkUpdateInput } from '@eventespresso/edtr-services';\n\nimport type { BulkEditFormShape } from './types';\n\ntype Callback = (values: BulkEditFormShape) => void;\n\nconst useSubmitForm = (onClose: VoidFunction): Callback => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst allDates = useDatetimes();\n\tconst { updateEntities } = useBulkEditDatetimes();\n\treturn useCallback<Callback>(\n\t\t(formData) => {\n\t\t\t// pull the shutter down\n\t\t\tonClose();\n\t\t\t// back to basics\n\t\t\tunSelectAll();\n\t\t\t// prepare mutation input from data\n\t\t\tconst input = formToBulkUpdateInput(formData, allDates, getSelected());\n\t\t\t// do the thing\n\t\t\tupdateEntities(input);\n\t\t},\n\t\t[allDates, getSelected, onClose, unSelectAll, updateEntities]\n\t);\n};\n\nexport default useSubmitForm;\n","import { __ } from '@eventespresso/i18n';\n\nimport { BulkEditDetails } from '@eventespresso/ee-components';\nimport useBulkEditFormConfig from './useBulkEditFormConfig';\nimport useSubmitForm from './useSubmitForm';\n\ntype EditDetailsProps = {\n\tisOpen: boolean;\n\tonClose: VoidFunction;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = ({ onClose, isOpen }) => {\n\tconst onSubmit = useSubmitForm(onClose);\n\tconst formConfig = useBulkEditFormConfig({ onSubmit });\n\n\treturn (\n\t\t<BulkEditDetails\n\t\t\tformConfig={formConfig}\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={__('Bulk edit date details')}\n\t\t\twarning={__('any changes will be applied to ALL of the selected dates.')}\n\t\t/>\n\t);\n};\n\nexport default EditDetails;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useBulkDeleteDatetimes } from '@eventespresso/edtr-services';\n\nimport type { OnDeleteProps } from './types';\n\ntype OnDelete = (props: OnDeleteProps) => VoidFunction;\n\nconst useOnDelete: OnDelete = ({ areTrashedDates, onClose }) => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst bulkDelete = useBulkDeleteDatetimes();\n\treturn useCallback<VoidFunction>(() => {\n\t\t// pull the shutter down\n\t\tonClose();\n\t\t// back to basics\n\t\tunSelectAll();\n\n\t\t// goodbye folks :wave:\n\t\tbulkDelete(getSelected(), areTrashedDates);\n\t}, [areTrashedDates, bulkDelete, getSelected, onClose, unSelectAll]);\n};\n\nexport default useOnDelete;\n","import { useEffect } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { useConfirmationDialog } from '@eventespresso/ui-components';\nimport useOnDelete from './useOnDelete';\nimport { OnDeleteProps } from './types';\n\nconst Delete: React.FC<OnDeleteProps> = ({ areTrashedDates, onClose }) => {\n\tconst onDelete = useOnDelete({ areTrashedDates, onClose });\n\n\tconst { confirmationDialog, onOpen } = useConfirmationDialog({\n\t\tmessage: areTrashedDates\n\t\t\t? __('Are you sure you want to permanently delete these datetimes? This action can NOT be undone!')\n\t\t\t: __('Are you sure you want to trash these datetimes?'),\n\t\ttitle: areTrashedDates ? __('Delete datetimes permanently') : __('Trash datetimes'),\n\t\tonConfirm: onDelete,\n\t\tonCancel: onClose,\n\t});\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseEffect(() => onOpen(), []);\n\n\treturn <>{confirmationDialog}</>;\n};\n\nexport default Delete;\n","import { useState, useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { BulkActions } from '@eventespresso/ee-components';\nimport { Collapsible } from '@eventespresso/ui-components';\nimport { useDisclosure, useMemoStringify } from '@eventespresso/hooks';\nimport { withFeature } from '@eventespresso/services';\nimport { useDatesListFilterState, hooks } from '@eventespresso/edtr-services';\nimport { DatetimeStatus } from '@eventespresso/predicates';\nimport { useBulkEdit } from '@eventespresso/services';\nimport type { BulkActionsProps } from '@eventespresso/ui-components';\n\nimport Checkbox from '../../tableView/Checkbox';\nimport { EditDetails } from '../details';\nimport { Delete } from '../delete';\n\ntype Action = 'edit-details' | 'delete' | '';\n\nconst actions: Array<Action> = ['edit-details', 'delete', ''];\n\nconst Actions: React.FC = () => {\n\tconst [action, setAction] = useState<Action>('');\n\tconst bulkEdit = useBulkEdit();\n\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\n\tconst { status, showBulkActions } = useDatesListFilterState();\n\n\tconst areTrashedDates = status === DatetimeStatus.trashedOnly;\n\n\tconst options = useMemoStringify(\n\t\thooks.applyFilters('eventEditor.datetimes.bulkEdit.actions', [\n\t\t\t{\n\t\t\t\tvalue: '',\n\t\t\t\tlabel: __('bulk actions'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'edit-details',\n\t\t\t\tlabel: __('edit datetime details'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'delete',\n\t\t\t\tlabel: areTrashedDates ? __('delete datetimes') : __('trash datetimes'),\n\t\t\t},\n\t\t])\n\t);\n\n\tconst onApply = useCallback<BulkActionsProps<Action>['onApply']>(\n\t\t(newAction) => {\n\t\t\tsetAction(newAction);\n\t\t\t// if it's a core action\n\t\t\tif (actions.includes(newAction)) {\n\t\t\t\tonOpen();\n\t\t\t}\n\t\t\thooks.doAction('eventEditor.datetimes.bulkEdit.apply', newAction, bulkEdit);\n\t\t},\n\t\t[bulkEdit, onOpen]\n\t);\n\n\treturn (\n\t\t<Collapsible show={showBulkActions}>\n\t\t\t<BulkActions\n\t\t\t\tCheckbox={Checkbox}\n\t\t\t\tdefaultAction=''\n\t\t\t\tid={'ee-bulk-edit-dates-actions'}\n\t\t\t\tonApply={onApply}\n\t\t\t\toptions={options}\n\t\t\t/>\n\t\t\t{isOpen && (\n\t\t\t\t<>\n\t\t\t\t\t{action === 'edit-details' && <EditDetails isOpen={true} onClose={onClose} />}\n\t\t\t\t\t{action === 'delete' && <Delete areTrashedDates={areTrashedDates} onClose={onClose} />}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Collapsible>\n\t);\n};\n\nexport default withFeature('use_bulk_edit')(Actions);\n","import { __ } from '@eventespresso/i18n';\n\nimport { EntityTable } from '@eventespresso/ee-components';\nimport { datesList, domain, useDatesListFilterState, useFilteredDateIds } from '@eventespresso/edtr-services';\nimport { withBulkEdit } from '@eventespresso/services';\n\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport { Actions as BulkEditActions } from '../bulkEdit';\n\nimport './styles.scss';\n\n/**\n * Displays event date details in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst filterState = useDatesListFilterState();\n\tconst filteredDateIds = useFilteredDateIds();\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<>\n\t\t\t<BulkEditActions />\n\t\t\t<EntityTable\n\t\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\t\tdomain={domain}\n\t\t\t\tentityIds={filteredDateIds}\n\t\t\t\tfilterState={filterState}\n\t\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\t\tlistId={datesList}\n\t\t\t\ttableCaption={__('Event Dates')}\n\t\t\t\ttableId='date-entities-table-view'\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default withBulkEdit(TableView);\n","import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\n\nvar slice =\n/*#__PURE__*/\n_curry3(\n/*#__PURE__*/\n_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\nexport default slice;","export default function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}","import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport slice from \"./slice.js\";\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\n\nvar tail =\n/*#__PURE__*/\n_curry1(\n/*#__PURE__*/\n_checkForMethod('tail',\n/*#__PURE__*/\nslice(1, Infinity)));\n\nexport default tail;","import _arity from \"./internal/_arity.js\";\nimport _pipe from \"./internal/_pipe.js\";\nimport reduce from \"./reduce.js\";\nimport tail from \"./tail.js\";\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\n\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}"],"sourceRoot":""}