{"version":3,"sources":["../domains/eventEditor/src/ui/tickets/TicketRegistrationsLink.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/Checkbox.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/useHeaderRowGenerator.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/useBodyRowGenerator.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/formValidation.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useBulkEditFormConfig.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useSubmitForm.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/EditDetails.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/useOnDelete.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/Delete.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/EditModeButtons.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/FooterButtons.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/useOnSubmitPrices.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/EditTogether.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/TPCInstance.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useOnSubmit.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/EditSeparately.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useManageTPCStates.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/EditPrices.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/actions/Actions.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/TableView.tsx","../node_modules/ramda/src/reduce.js","../node_modules/ramda/src/pipe.js","../node_modules/ramda/src/internal/_checkForMethod.js","../node_modules/ramda/src/internal/_pipe.js","../node_modules/ramda/src/tail.js","../node_modules/ramda/src/slice.js"],"names":["TicketRegistrationsLink","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","count","registrationCount","emphasizeZero","title","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","value","EditableName","className","view","lineCount","onChangeName","name","ticketName","tag","useRecalculateBasePrice","ticketId","getDataState","useTPCInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","getBasePrice","prices","newPrices","order","isNew","calculateBasePrice","then","relatedPriceIds","reverseCalculate","EditablePrice","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","amount","parseFloat","wrapperProps","useMemoStringify","isEditDisabled","Boolean","sold","SOLD_TICKET_ERROR_MESSAGE","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","withFeature","useVisibleTicketIds","visibleTicketIds","visibleEntityIds","useHeaderRowGenerator","useShowTicketBA","showBulkActions","stripeCell","useMemo","key","size","textAlign","checkboxCell","idCell","nameCell","startCell","endCell","priceCell","quantityCell","soldCell","registrationsCell","actionsCell","filterState","displayStartOrEndDate","cells","filter","filterCellByStartOrEndDate","primary","type","useBodyRowGenerator","getTicket","useLazyTicket","entityId","bgClassName","getTicketBackgroundColorClassName","shortenGuid","statusClassName","ticketStatus","classNames","showValueOnMobile","bulkActionCheckboxCell","format","Date","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","cellsData","pipe","addZebraStripesOnMobile","validate","values","a","yupToFinalFormErrors","validationSchema","yup","min","unitOptions","intervalsToOptions","pick","DATE_INTERVALS","useBulkEditFormConfig","config","onSubmit","onSubmitFrom","form","restParams","adjacentFormItemProps","layout","debugFields","sections","icon","ProfileOutlined","fields","label","fieldType","CalendarOutlined","formControlProps","subFields","options","ControlOutlined","parseAsInfinity","max","useSubmitForm","onClose","useBulkEdit","getSelected","unSelectAll","allTickets","useTickets","updateEntities","useBulkEditTickets","formData","input","formToBulkUpdateInput","EditDetails","isOpen","formConfig","warning","useOnDelete","areTrashedTickets","bulkDelete","useBulkDeleteTickets","entityIds","deletePermanently","Delete","onDelete","useConfirmationDialog","message","onConfirm","onCancel","confirmationDialog","onOpen","useEffect","EditModeButtons","setEditMode","onClickTogether","onClickSeparate","display","alignItems","justifyContent","height","onClick","buttonText","orientation","FooterButtons","onReset","fullWidth","horizontalAlign","topBordered","buttonType","ButtonType","PRIMARY","useOnSubmitPrices","useTPCDataState","relatedPrices","useTicketPrices","deletePrices","useBulkDeletePrices","nonDefaultPrices","isNotDefault","getGuids","Promise","all","map","parsedAmount","toBoolean","isTaxable","withTPCContext","addDefaultPrices","useAddDefaultPrices","TPCInstance","setTPCState","getData","sprintf","useOnSubmit","getDataStates","submitPrices","Object","dataState","EditSeparately","dataStates","useRef","current","getTPCDataStates","useManageTPCStates","ticketIds","Instance","EditPrices","useState","editMode","closeOnOverlayClick","action","setAction","useDisclosure","status","useTicketsListFilterState","isEditPricesDisabled","entitiesWithGuIdInArray","some","TicketsStatus","trashedOnly","disabled","onApply","show","Checkbox","defaultAction","variant","withBulkEdit","filteredTicketIds","useFilteredTicketIds","sortTickets","useReorderTickets","sortResponder","bodyRowGenerator","headerRowGenerator","domain","listId","ticketsList","onSort","tableCaption","tableId","reduce","require","_curry3","module","exports","_arity","_pipe","tail","arguments","length","Error","_isArray","methodname","fn","obj","apply","this","Array","prototype","slice","call","f","g","_checkForMethod","_curry1","Infinity","fromIndex","toIndex","list"],"mappings":"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","file":"static/js/tickets-table-view.1659e1a3.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default TicketRegistrationsLink;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, TextProps } from '@eventespresso/ui-components';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.quantity, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChange={onChange}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst tooltip = __('edit title…');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { getBasePrice } from '@eventespresso/predicates';\nimport {\n\tuseTPCInitialState,\n\tcalculateBasePrice,\n\tuseDefaultBasePrice,\n\tuseMutatePrices,\n} from '@eventespresso/edtr-services';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => void;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useTPCInitialState({ ticketId });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\t(ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData?.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst exitingBasePrice = getBasePrice(tpcData?.prices);\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tif (!exitingBasePrice) {\n\t\t\t\tconst newPrices = [\n\t\t\t\t\t// add the default price\n\t\t\t\t\t{ ...defaultBasePrice, order: 1, isNew: true },\n\t\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t\t// may be their taxation systen works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t\t...tpcData?.prices,\n\t\t\t\t];\n\t\t\t\ttpcData = { ...tpcData, prices: newPrices };\n\t\t\t}\n\t\t\t// get the list of updated prices with the amount of base price updated\n\t\t\tconst newPrices = calculateBasePrice(tpcData);\n\n\t\t\tmutatePrices(newPrices).then((relatedPriceIds) => {\n\t\t\t\tupdateTicket({\n\t\t\t\t\t// this is the ticket prices amount\n\t\t\t\t\tprice: ticketPrice,\n\t\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\t\treverseCalculate: true,\n\t\t\t\t\t// Make sure related prices are updated\n\t\t\t\t\tprices: relatedPriceIds,\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { SOLD_TICKET_ERROR_MESSAGE } from '@eventespresso/edtr-services';\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = parseFloat(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isEditDisabled = Boolean(ticket.sold);\n\n\tconst tooltip = isEditDisabled ? SOLD_TICKET_ERROR_MESSAGE : __('edit ticket total…');\n\n\treturn (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tisEditDisabled={isEditDisabled}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { ActionCheckbox } from '@eventespresso/ee-components';\nimport { useVisibleTicketIds } from '@eventespresso/edtr-services';\nimport { withFeature } from '@eventespresso/services';\nimport type { ActionCheckboxProps } from '@eventespresso/ee-components';\n\nconst Checkbox: React.FC<ActionCheckboxProps> = (props) => {\n\tconst [visibleTicketIds] = useVisibleTicketIds();\n\n\treturn <ActionCheckbox {...props} visibleEntityIds={visibleTicketIds} />;\n};\n\nexport default withFeature('use_bulk_edit')(Checkbox);\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { filterCellByStartOrEndDate, useShowTicketBA } from '@eventespresso/edtr-services';\n\nimport type { CellData } from '@eventespresso/ui-components';\nimport type { HeaderRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport Checkbox from './Checkbox';\n\ntype TicketsTableHeaderRowGen = HeaderRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useHeaderRowGenerator = (): TicketsTableHeaderRowGen => {\n\tconst [showBulkActions] = useShowTicketBA();\n\n\tconst stripeCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-entity-list-status-stripe',\n\t\t\tkey: 'stripe',\n\t\t\tsize: 'nano',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: '',\n\t\t}),\n\t\t[]\n\t);\n\n\tconst checkboxCell: CellData = useMemo(\n\t\t() =>\n\t\t\tshowBulkActions && {\n\t\t\t\tkey: 'checkbox',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: (\n\t\t\t\t\t<div className={'ee-rspnsv-table-hide-on-mobile'}>\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t},\n\t\t[showBulkActions]\n\t);\n\n\tconst idCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'id',\n\t\t\tsize: 'micro',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('ID'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst nameCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'name',\n\t\t\tsize: 'huge',\n\t\t\tvalue: __('Name'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst startCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'start',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Goes on Sale')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('On Sale')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst endCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'end',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Sale Ends')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Ends')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst priceCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'price',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Price'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst quantityCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'quantity',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Quantity'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst soldCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'sold',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Sold'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst registrationsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'registrations',\n\t\t\tsize: 'smaller',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Registrations')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Regs')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst actionsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'actions',\n\t\t\tsize: 'big',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Actions')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\treturn useCallback<TicketsTableHeaderRowGen>(\n\t\t(filterState) => {\n\t\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tcheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t];\n\n\t\t\tconst cells = cellsData\n\t\t\t\t.filter(\n\t\t\t\t\t// removes falsy values\n\t\t\t\t\tBoolean\n\t\t\t\t)\n\t\t\t\t.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: 'ee-editor-ticket-list-items-header-row',\n\t\t\t\tkey: 'ticket-header-row',\n\t\t\t\tprimary: true,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tidCell,\n\t\t\tactionsCell,\n\t\t\tcheckboxCell,\n\t\t\tendCell,\n\t\t\tnameCell,\n\t\t\tpriceCell,\n\t\t\tquantityCell,\n\t\t\tregistrationsCell,\n\t\t\tsoldCell,\n\t\t\tstartCell,\n\t\t\tstripeCell,\n\t\t]\n\t);\n};\n\nexport default useHeaderRowGenerator;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { format } from 'date-fns';\nimport { filter, pipe } from 'ramda';\n\nimport { addZebraStripesOnMobile, CellData } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { filterCellByStartOrEndDate, useLazyTicket, useShowTicketBA } from '@eventespresso/edtr-services';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@eventespresso/constants';\nimport { getTicketBackgroundColorClassName, ticketStatus } from '@eventespresso/helpers';\nimport { shortenGuid } from '@eventespresso/utils';\nimport type { BodyRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport TicketActionsMenu from '@edtrUI/tickets/ticketsList/actionsMenu/TicketActionsMenu';\nimport TicketQuantity from '../cardView/TicketQuantity';\nimport { EditableName } from '../editable';\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport Checkbox from './Checkbox';\n\ntype TicketsTableBodyRowGen = BodyRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useBodyRowGenerator = (): TicketsTableBodyRowGen => {\n\tconst getTicket = useLazyTicket();\n\tconst [showBulkActions] = useShowTicketBA();\n\n\treturn useCallback<TicketsTableBodyRowGen>(\n\t\t({ entityId, filterState }) => {\n\t\t\tconst ticket = getTicket(entityId);\n\t\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\t\tconst bgClassName = getTicketBackgroundColorClassName(ticket);\n\t\t\tconst id = ticket.dbId || shortenGuid(ticket.id);\n\t\t\tconst statusClassName = ticketStatus(ticket);\n\n\t\t\tconst stripeCell: CellData = {\n\t\t\t\tclassName: classNames('ee-entity-list-status-stripe', bgClassName),\n\t\t\t\tkey: 'stripe',\n\t\t\t\tshowValueOnMobile: true,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: ticket.name,\n\t\t\t};\n\n\t\t\tconst bulkActionCheckboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'cell',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <Checkbox dbId={ticket.dbId} id={ticket.id} />,\n\t\t\t};\n\n\t\t\tconst idCell: CellData = {\n\t\t\t\tkey: 'id',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: id,\n\t\t\t};\n\n\t\t\tconst nameCell: CellData = {\n\t\t\t\tclassName: 'ee-col-name ee-rspnsv-table-hide-on-mobile',\n\t\t\t\tkey: 'name',\n\t\t\t\tsize: 'huge',\n\t\t\t\tvalue: (\n\t\t\t\t\t<EditableName\n\t\t\t\t\t\tclassName={'ee-entity-list-text ee-focus-priority-5'}\n\t\t\t\t\t\tentity={ticket}\n\t\t\t\t\t\tview={'table'}\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst startCell: CellData = {\n\t\t\t\tkey: 'start',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(new Date(ticket.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst endCell: CellData = {\n\t\t\t\tkey: 'end',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(new Date(ticket.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst priceCell: CellData = {\n\t\t\t\tkey: 'price',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <CurrencyDisplay value={ticket.price} />,\n\t\t\t};\n\n\t\t\tconst soldCell: CellData = {\n\t\t\t\tkey: 'sold',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: ticket.sold,\n\t\t\t};\n\n\t\t\tconst quantityCell: CellData = {\n\t\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\t\tkey: 'quantity',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst registrationsCell: CellData = {\n\t\t\t\tkey: 'registrations',\n\t\t\t\tsize: 'smaller',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t};\n\n\t\t\tconst actionsCell: CellData = {\n\t\t\t\tkey: 'actions',\n\t\t\t\tsize: 'big',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketActionsMenu entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tbulkActionCheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t].filter(\n\t\t\t\t// removes falsy values\n\t\t\t\tBoolean\n\t\t\t);\n\n\t\t\tconst exclude = ['row', 'stripe', 'name', 'actions'];\n\n\t\t\tconst cells = pipe(\n\t\t\t\tfilter(filterCellByStartOrEndDate(displayStartOrEndDate)),\n\t\t\t\taddZebraStripesOnMobile(exclude)\n\t\t\t)(cellsData);\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: `ee-editor-date-list-view-row ${statusClassName}`,\n\t\t\t\tid: `ee-editor-date-list-view-row-${ticket.id}`,\n\t\t\t\tkey: `row-${ticket.id}`,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[getTicket, showBulkActions]\n\t);\n};\n\nexport default useBodyRowGenerator;\n","import { __ } from '@eventespresso/i18n';\nimport * as yup from 'yup';\n\nimport { yupToFinalFormErrors } from '@eventespresso/form';\nimport { BulkEditFormShape } from './types';\n\nexport const validate = async (values: BulkEditFormShape): Promise<any> => {\n\treturn await yupToFinalFormErrors(validationSchema, values);\n};\n\nconst validationSchema = yup.object({\n\tname: yup.string().min(3, () => __('Name must be at least three characters')),\n});\n","import { useMemo, useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\nimport { pick } from 'ramda';\n\nimport { CalendarOutlined, ControlOutlined, ProfileOutlined } from '@eventespresso/icons';\nimport { intervalsToOptions, Intervals, DATE_INTERVALS } from '@eventespresso/dates';\nimport type { EspressoFormProps } from '@eventespresso/form';\n\nimport { validate } from './formValidation';\nimport type { BulkEditFormShape } from './types';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\ntype DateFormConfig = EspressoFormProps<BulkEditFormShape>;\n\nconst unitOptions = intervalsToOptions(\n\tpick<Intervals, keyof Intervals>(['months', 'weeks', 'days', 'hours', 'minutes'], DATE_INTERVALS),\n\ttrue\n);\n\nconst useBulkEditFormConfig = (config?: EspressoFormProps<BulkEditFormShape>): DateFormConfig => {\n\tconst { onSubmit } = config;\n\n\tconst onSubmitFrom: DateFormConfig['onSubmit'] = useCallback(\n\t\t(values, form, ...restParams) => {\n\t\t\treturn onSubmit(values, form, ...restParams);\n\t\t},\n\t\t[onSubmit]\n\t);\n\n\tconst adjacentFormItemProps = useMemoStringify({\n\t\tclassName: 'ee-form-item-pair',\n\t});\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\t...config,\n\t\t\tonSubmit: onSubmitFrom,\n\t\t\tvalidate,\n\t\t\tlayout: 'horizontal',\n\t\t\tdebugFields: ['values', 'errors'],\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tname: 'basics',\n\t\t\t\t\ticon: ProfileOutlined,\n\t\t\t\t\ttitle: __('Basics'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tlabel: __('Name'),\n\t\t\t\t\t\t\tfieldType: 'text',\n\t\t\t\t\t\t\tmin: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\t\tlabel: __('Description'),\n\t\t\t\t\t\t\tfieldType: 'simple-text-editor',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'dates',\n\t\t\t\t\ticon: CalendarOutlined,\n\t\t\t\t\ttitle: __('Dates'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'shiftDates',\n\t\t\t\t\t\t\tlabel: __('Shift dates'),\n\t\t\t\t\t\t\tfieldType: 'group',\n\t\t\t\t\t\t\tformControlProps: {\n\t\t\t\t\t\t\t\tclassName: 'shift-dates',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsubFields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'unit',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: unitOptions,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('earlier'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'earlier',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('later'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'later',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'details',\n\t\t\t\t\ticon: ControlOutlined,\n\t\t\t\t\ttitle: __('Details'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'quantity',\n\t\t\t\t\t\t\tlabel: __('Quantity For Sale'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'uses',\n\t\t\t\t\t\t\tlabel: __('Number of Uses'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'min',\n\t\t\t\t\t\t\tlabel: __('Minimum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'max',\n\t\t\t\t\t\t\tlabel: __('Maximum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'isRequired',\n\t\t\t\t\t\t\tlabel: __('Required Ticket'),\n\t\t\t\t\t\t\tfieldType: 'switch',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\t[adjacentFormItemProps, config, onSubmitFrom]\n\t);\n};\n\nexport default useBulkEditFormConfig;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useTickets, useBulkEditTickets, formToBulkUpdateInput } from '@eventespresso/edtr-services';\n\nimport type { BulkEditFormShape } from './types';\n\ntype Callback = (values: BulkEditFormShape) => void;\n\nconst useSubmitForm = (onClose: VoidFunction): Callback => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst allTickets = useTickets();\n\tconst { updateEntities } = useBulkEditTickets();\n\treturn useCallback<Callback>(\n\t\t(formData) => {\n\t\t\t// pull the shutter down\n\t\t\tonClose();\n\t\t\t// back to basics\n\t\t\tunSelectAll();\n\t\t\t// prepare mutation input from data\n\t\t\tconst input = formToBulkUpdateInput(formData, allTickets, getSelected());\n\t\t\t// do the thing\n\t\t\tupdateEntities(input);\n\t\t},\n\t\t[allTickets, getSelected, onClose, unSelectAll, updateEntities]\n\t);\n};\n\nexport default useSubmitForm;\n","import { __ } from '@eventespresso/i18n';\n\nimport { BulkEditDetails } from '@eventespresso/ee-components';\nimport useBulkEditFormConfig from './useBulkEditFormConfig';\nimport useSubmitForm from './useSubmitForm';\n\ntype EditDetailsProps = {\n\tisOpen: boolean;\n\tonClose: VoidFunction;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = ({ onClose, isOpen }) => {\n\tconst onSubmit = useSubmitForm(onClose);\n\tconst formConfig = useBulkEditFormConfig({ onSubmit });\n\n\treturn (\n\t\t<BulkEditDetails\n\t\t\tformConfig={formConfig}\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={__('Bulk edit ticket details')}\n\t\t\twarning={__('any changes will be applied to ALL of the selected tickets.')}\n\t\t/>\n\t);\n};\n\nexport default EditDetails;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useBulkDeleteTickets } from '@eventespresso/edtr-services';\n\nimport type { OnDeleteProps } from './types';\n\ntype OnDelete = (props: OnDeleteProps) => VoidFunction;\n\nconst useOnDelete: OnDelete = ({ areTrashedTickets, onClose }) => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst bulkDelete = useBulkDeleteTickets();\n\treturn useCallback<VoidFunction>(() => {\n\t\t// pull the shutter down\n\t\tonClose();\n\t\t// back to basics\n\t\tunSelectAll();\n\n\t\t// goodbye folks :wave:\n\t\tbulkDelete({ entityIds: getSelected(), deletePermanently: areTrashedTickets });\n\t}, [areTrashedTickets, bulkDelete, getSelected, onClose, unSelectAll]);\n};\n\nexport default useOnDelete;\n","import { useEffect } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { useConfirmationDialog } from '@eventespresso/ui-components';\nimport useOnDelete from './useOnDelete';\nimport { OnDeleteProps } from './types';\n\nconst Delete: React.FC<OnDeleteProps> = ({ areTrashedTickets, onClose }) => {\n\tconst onDelete = useOnDelete({ areTrashedTickets, onClose });\n\n\tconst { confirmationDialog, onOpen } = useConfirmationDialog({\n\t\tmessage: areTrashedTickets\n\t\t\t? __('Are you sure you want to permanently delete these tickets? This action can NOT be undone!')\n\t\t\t: __('Are you sure you want to trash these tickets?'),\n\t\ttitle: areTrashedTickets ? __('Delete tickets permanently') : __('Trash tickets'),\n\t\tonConfirm: onDelete,\n\t\tonCancel: onClose,\n\t});\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseEffect(() => onOpen(), []);\n\n\treturn <>{confirmationDialog}</>;\n};\n\nexport default Delete;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { Button, Divider } from '@eventespresso/ui-components';\nimport { Box } from '@eventespresso/adapters';\nimport type { EditMode } from '../types';\n\nexport interface EditModeButtonsProps {\n\tsetEditMode: (editMode: EditMode) => void;\n}\n\nexport const EditModeButtons: React.FC<EditModeButtonsProps> = ({ setEditMode }) => {\n\tconst onClickTogether = useCallback(() => setEditMode('together'), [setEditMode]);\n\tconst onClickSeparate = useCallback(() => setEditMode('separate'), [setEditMode]);\n\n\treturn (\n\t\t<Box display='flex' alignItems='center' justifyContent='center' height='100%'>\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickTogether} buttonText={__('Edit all prices together')} />\n\t\t\t\t<p>{__('Edit all the selected ticket prices dynamically')}</p>\n\t\t\t</Box>\n\t\t\t<Divider orientation='vertical' />\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickSeparate} buttonText={__('Edit prices individually')} />\n\t\t\t\t<p>{__('Edit prices for each ticket individually')}</p>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n","import { __ } from '@eventespresso/i18n';\n\nimport { Button, ButtonRow, ButtonType } from '@eventespresso/ui-components';\n\nexport interface FooterButtonsProps {\n\tonSubmit: VoidFunction;\n\tonReset?: VoidFunction;\n\tonCancel?: VoidFunction;\n}\n\nexport const FooterButtons: React.FC<FooterButtonsProps> = ({ onSubmit, onReset, onCancel }) => {\n\treturn (\n\t\t<ButtonRow fullWidth horizontalAlign='right' topBordered>\n\t\t\t{onReset && <Button buttonText={__('Reset')} onClick={onReset} type='reset' />}\n\t\t\t{onCancel && <Button buttonText={__('Cancel')} onClick={onCancel} />}\n\t\t\t<Button buttonText={__('Submit')} buttonType={ButtonType.PRIMARY} onClick={onSubmit} type='submit' />\n\t\t</ButtonRow>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport {\n\tuseMutatePrices,\n\tuseTPCDataState,\n\tuseTicketMutator,\n\tuseTicketPrices,\n\tuseBulkDeletePrices,\n} from '@eventespresso/edtr-services';\nimport { parsedAmount, toBoolean } from '@eventespresso/utils';\nimport { isNotDefault, getGuids } from '@eventespresso/predicates';\nimport { useBulkEdit } from '@eventespresso/services';\n\nconst useOnSubmitPrices = (onClose: VoidFunction): (() => Promise<void>) => {\n\tconst { prices, ticket } = useTPCDataState();\n\tconst { getSelected } = useBulkEdit();\n\n\tconst { updateEntity: updateTicket } = useTicketMutator();\n\tconst mutatePrices = useMutatePrices();\n\n\t// prices related to all the selected tickets\n\tconst relatedPrices = useTicketPrices(getSelected());\n\n\tconst deletePrices = useBulkDeletePrices();\n\n\t// prices may contain default taxes,\n\t// we need to make sure they are not deleted.\n\tconst nonDefaultPrices = relatedPrices.filter(isNotDefault);\n\n\t// Async to make sure that prices are handled before updating the ticket.\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\t\t// delete all non-default prices\n\t\tawait deletePrices(getGuids(nonDefaultPrices));\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update thei price information\n\t\t\tgetSelected().map(async (ticketId) => {\n\t\t\t\t// create/update prices and collect their ids\n\t\t\t\tconst relatedPriceIds = await mutatePrices(prices);\n\n\t\t\t\t// Finally update the ticket and its price relation\n\t\t\t\tawait updateTicket({\n\t\t\t\t\tid: ticketId,\n\t\t\t\t\tprice: parsedAmount(ticket.price || 0),\n\t\t\t\t\treverseCalculate: toBoolean(ticket.reverseCalculate),\n\t\t\t\t\tisTaxable: toBoolean(ticket.isTaxable),\n\t\t\t\t\tprices: relatedPriceIds,\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}, [deletePrices, getSelected, mutatePrices, nonDefaultPrices, onClose, prices, ticket, updateTicket]);\n};\n\nexport default useOnSubmitPrices;\n","import { useEffect } from 'react';\n\nimport { useAddDefaultPrices, withTPCContext } from '@eventespresso/edtr-services';\nimport { TicketPriceCalculator } from '@eventespresso/tpc';\n\nimport { FooterButtons } from '../buttons';\nimport useOnSubmitPrices from './useOnSubmitPrices';\nimport type { EditPricesBaseProps } from '../types';\n\nconst EditTogether: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst addDefaultPrices = useAddDefaultPrices();\n\t// add default prices on mount\n\tuseEffect(() => {\n\t\taddDefaultPrices();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst onSubmit = useOnSubmitPrices(onClose);\n\n\treturn (\n\t\t<>\n\t\t\t<TicketPriceCalculator />\n\t\t\t<FooterButtons onSubmit={onSubmit} onReset={addDefaultPrices} />\n\t\t</>\n\t);\n};\n\nexport default withTPCContext(EditTogether, { ticketId: '' });\n","import { useEffect } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { TicketPriceCalculator } from '@eventespresso/tpc';\nimport { useTPCDataState } from '@eventespresso/edtr-services';\nimport type { ManageTPCStates } from './useManageTPCStates';\n\nexport interface TPCInstanceProps {\n\tsetTPCState: ManageTPCStates['setTPCState'];\n}\n\nexport const TPCInstance: React.FC<TPCInstanceProps> = ({ setTPCState }) => {\n\tconst { ticket, getData } = useTPCDataState();\n\n\tuseEffect(() => {\n\t\tsetTPCState(getData());\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [getData]);\n\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t{sprintf(\n\t\t\t\t\t/* translators: %s ticket name */\n\t\t\t\t\t__('Edit prices for Ticket: %s'),\n\t\t\t\t\tticket.name\n\t\t\t\t)}\n\t\t\t</header>\n\t\t\t<TicketPriceCalculator />\n\t\t</>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { useOnSubmitPrices } from '@eventespresso/edtr-services';\nimport type { ManageTPCStates } from './useManageTPCStates';\n\nconst useOnSubmit = (\n\tonClose: VoidFunction,\n\tgetDataStates: ManageTPCStates['getTPCDataStates']\n): (() => Promise<void>) => {\n\tconst submitPrices = useOnSubmitPrices();\n\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update their price information\n\t\t\tObject.values(getDataStates()).map(async (dataState) => {\n\t\t\t\t// Finally update the ticket and its price relation\n\t\t\t\tawait submitPrices(dataState);\n\t\t\t})\n\t\t);\n\t}, [getDataStates, onClose, submitPrices]);\n};\n\nexport default useOnSubmit;\n","import { withTPCContext } from '@eventespresso/edtr-services';\nimport { useBulkEdit } from '@eventespresso/services';\n\nimport { EditPricesBaseProps } from '../types';\nimport { TPCInstance } from './TPCInstance';\nimport { FooterButtons } from '../buttons';\nimport { useManageTPCStates } from './useManageTPCStates';\nimport useOnSubmit from './useOnSubmit';\n\nconst EditSeparately: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst { getSelected } = useBulkEdit();\n\n\tconst { getTPCDataStates, setTPCState } = useManageTPCStates();\n\n\tconst onSubmit = useOnSubmit(onClose, getTPCDataStates);\n\n\tconst ticketIds = getSelected();\n\n\treturn (\n\t\t<>\n\t\t\t{ticketIds.map<React.ReactNode>((ticketId) => {\n\t\t\t\tconst Instance = withTPCContext(TPCInstance, { ticketId });\n\t\t\t\treturn <Instance key={ticketId} setTPCState={setTPCState} />;\n\t\t\t})}\n\t\t\t<FooterButtons onSubmit={onSubmit} onCancel={onClose} />\n\t\t</>\n\t);\n};\n\nexport default EditSeparately;\n","import { useCallback, useMemo, useRef } from 'react';\n\nimport { AnyObject } from '@eventespresso/utils';\nimport type { TPCDataState } from '@eventespresso/edtr-services';\n\nexport interface ManageTPCStates {\n\tsetTPCState: (dataState: TPCDataState) => void;\n\tgetTPCDataStates: () => AnyObject<TPCDataState>;\n}\n\nexport const useManageTPCStates = (): ManageTPCStates => {\n\t/**\n\t * This contains the data for all TPC instances.\n\t *\n\t * Since this is not used anywhere in the view, rather only used on final submission\n\t * useRef is made for this, to avoid any unnecessary re-renders\n\t */\n\tconst dataStates = useRef<AnyObject<TPCDataState>>({});\n\n\tconst setTPCState = useCallback<ManageTPCStates['setTPCState']>(\n\t\t(dataState) => {\n\t\t\tdataStates.current = { ...dataStates.current, [dataState?.ticket?.id]: dataState };\n\t\t},\n\t\t[dataStates]\n\t);\n\n\tconst getTPCDataStates = useCallback<ManageTPCStates['getTPCDataStates']>(() => dataStates.current, [dataStates]);\n\n\treturn useMemo(() => ({ setTPCState, getTPCDataStates }), [setTPCState, getTPCDataStates]);\n};\n","import { useState } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityEditModal } from '@eventespresso/ui-components';\nimport { EditModeButtons } from './buttons';\nimport { EditTogether } from './editTogether';\nimport { EditSeparately } from './editSeparately';\nimport type { EditMode, EditPricesBaseProps } from './types';\n\nconst EditPrices: React.FC<EditPricesBaseProps> = ({ onClose, isOpen }) => {\n\tconst [editMode, setEditMode] = useState<EditMode>();\n\n\treturn (\n\t\t<EntityEditModal\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\tcloseOnOverlayClick={true}\n\t\t\ttitle={__('Bulk edit ticket prices')}\n\t\t>\n\t\t\t{!editMode && <EditModeButtons setEditMode={setEditMode} />}\n\t\t\t{editMode === 'together' && <EditTogether onClose={onClose} />}\n\t\t\t{editMode === 'separate' && <EditSeparately onClose={onClose} />}\n\t\t</EntityEditModal>\n\t);\n};\n\nexport default EditPrices;\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { BulkActions } from '@eventespresso/ee-components';\nimport { Collapsible, ErrorMessage } from '@eventespresso/ui-components';\nimport { useDisclosure, useMemoStringify } from '@eventespresso/hooks';\nimport {\n\tSOLD_TICKET_ERROR_MESSAGE,\n\tuseShowTicketBA,\n\tuseTickets,\n\tuseTicketsListFilterState,\n} from '@eventespresso/edtr-services';\nimport { entitiesWithGuIdInArray, TicketsStatus } from '@eventespresso/predicates';\nimport { withFeature, useBulkEdit } from '@eventespresso/services';\nimport type { BulkActionsProps } from '@eventespresso/ui-components';\n\nimport Checkbox from '../../tableView/Checkbox';\nimport { EditDetails } from '../details';\nimport { Delete } from '../delete';\nimport { EditPrices } from '../prices';\n\ntype Action = 'edit-details' | 'delete' | 'edit-prices' | '';\n\nconst Actions: React.FC = () => {\n\tconst [action, setAction] = useState<Action>('');\n\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst [showBulkActions] = useShowTicketBA();\n\tconst { status } = useTicketsListFilterState();\n\tconst { getSelected } = useBulkEdit();\n\tconst allTickets = useTickets();\n\n\tconst isEditPricesDisabled = useMemo(() => {\n\t\tconst selectedTickets = entitiesWithGuIdInArray(allTickets, getSelected());\n\t\tconst isSoldTicketSelected = selectedTickets.some((ticket) => Boolean(ticket.sold));\n\t\treturn isSoldTicketSelected;\n\t}, [allTickets, getSelected]);\n\n\tconst areTrashedTickets = status === TicketsStatus.trashedOnly;\n\n\tconst options = useMemoStringify([\n\t\t{\n\t\t\tvalue: '',\n\t\t\tlabel: __('bulk actions'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-details',\n\t\t\tlabel: __('edit ticket details'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'delete',\n\t\t\tlabel: areTrashedTickets ? __('delete tickets') : __('trash tickets'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-prices',\n\t\t\tlabel: __('edit ticket prices'),\n\t\t\tdisabled: isEditPricesDisabled,\n\t\t},\n\t]);\n\n\tconst onApply = useCallback<BulkActionsProps<Action>['onApply']>(\n\t\t(action) => {\n\t\t\tsetAction(action);\n\t\t\tonOpen();\n\t\t},\n\t\t[onOpen]\n\t);\n\n\treturn (\n\t\t<Collapsible show={showBulkActions}>\n\t\t\t<BulkActions\n\t\t\t\tCheckbox={Checkbox}\n\t\t\t\tdefaultAction=''\n\t\t\t\tid={'ee-bulk-edit-tickets-actions'}\n\t\t\t\tonApply={isEditPricesDisabled ? null : onApply}\n\t\t\t\toptions={options}\n\t\t\t/>\n\t\t\t{isOpen && (\n\t\t\t\t<>\n\t\t\t\t\t{action === 'edit-details' && <EditDetails isOpen={true} onClose={onClose} />}\n\t\t\t\t\t{action === 'delete' && <Delete areTrashedTickets={areTrashedTickets} onClose={onClose} />}\n\t\t\t\t\t{action === 'edit-prices' && <EditPrices isOpen={true} onClose={onClose} />}\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<ErrorMessage message={isEditPricesDisabled && SOLD_TICKET_ERROR_MESSAGE} variant='subtle' />\n\t\t</Collapsible>\n\t);\n};\n\nexport default withFeature('use_bulk_edit')(Actions);\n","import { __ } from '@eventespresso/i18n';\n\nimport { EntityTable } from '@eventespresso/ee-components';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport {\n\tticketsList,\n\tdomain,\n\tuseFilteredTicketIds,\n\tuseReorderTickets,\n\tuseTicketsListFilterState,\n} from '@eventespresso/edtr-services';\nimport { withBulkEdit } from '@eventespresso/services';\nimport { Actions as BulkEditActions } from '../bulkEdit';\n\n/**\n * Displays tickets in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst filterState = useTicketsListFilterState();\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\tconst { sortResponder: sortTickets } = useReorderTickets(filteredTicketIds);\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<>\n\t\t\t<BulkEditActions />\n\t\t\t<EntityTable\n\t\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\t\tdomain={domain}\n\t\t\t\tentityIds={filteredTicketIds}\n\t\t\t\tfilterState={filterState}\n\t\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\t\tlistId={ticketsList}\n\t\t\t\tonSort={sortTickets}\n\t\t\t\ttableCaption={__('Tickets')}\n\t\t\t\ttableId='ticket-entities-table-view'\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default withBulkEdit(TableView);\n","var _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n\nvar _reduce =\n/*#__PURE__*/\nrequire(\"./internal/_reduce\");\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\n\n\nvar reduce =\n/*#__PURE__*/\n_curry3(_reduce);\n\nmodule.exports = reduce;","var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _pipe =\n/*#__PURE__*/\nrequire(\"./internal/_pipe\");\n\nvar reduce =\n/*#__PURE__*/\nrequire(\"./reduce\");\n\nvar tail =\n/*#__PURE__*/\nrequire(\"./tail\");\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\n\n\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}\n\nmodule.exports = pipe;","var _isArray =\n/*#__PURE__*/\nrequire(\"./_isArray\");\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n\nmodule.exports = _checkForMethod;","function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}\n\nmodule.exports = _pipe;","var _checkForMethod =\n/*#__PURE__*/\nrequire(\"./internal/_checkForMethod\");\n\nvar _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n\nvar slice =\n/*#__PURE__*/\nrequire(\"./slice\");\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\n\n\nvar tail =\n/*#__PURE__*/\n_curry1(\n/*#__PURE__*/\n_checkForMethod('tail',\n/*#__PURE__*/\nslice(1, Infinity)));\n\nmodule.exports = tail;","var _checkForMethod =\n/*#__PURE__*/\nrequire(\"./internal/_checkForMethod\");\n\nvar _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\n\n\nvar slice =\n/*#__PURE__*/\n_curry3(\n/*#__PURE__*/\n_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\nmodule.exports = slice;"],"sourceRoot":""}