{"version":3,"sources":["../domains/eventEditor/src/ui/tickets/TicketRegistrationsLink.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/Checkbox.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/useHeaderRowGenerator.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/useBodyRowGenerator.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/formValidation.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useBulkEditFormConfig.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/useSubmitForm.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/details/EditDetails.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/useOnDelete.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/delete/Delete.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/EditModeButtons.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/buttons/FooterButtons.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/useOnSubmitPrices.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editTogether/EditTogether.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/TPCInstance.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useOnSubmit.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/EditSeparately.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/editSeparately/useManageTPCStates.ts","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/prices/EditPrices.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/bulkEdit/actions/Actions.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/tableView/TableView.tsx","../node_modules/ramda/src/reduce.js","../node_modules/ramda/src/pipe.js","../node_modules/ramda/src/internal/_checkForMethod.js","../node_modules/ramda/src/internal/_pipe.js","../node_modules/ramda/src/tail.js","../node_modules/ramda/src/slice.js"],"names":["TicketRegistrationsLink","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","count","registrationCount","emphasizeZero","title","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","value","EditableName","className","view","lineCount","onChangeName","name","ticketName","tag","useRecalculateBasePrice","ticketId","getTicket","useLazyTicket","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","getBasePrice","prices","newPrices","order","isNew","calculateBasePrice","then","relatedPriceIds","reverseCalculate","EditablePrice","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","amount","parseFloat","useLockedTicketAction","alertContainer","showAlert","wrapperProps","useMemoStringify","isTicketLocked","isLocked","as","onClick","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","withFeature","useVisibleTicketIds","visibleTicketIds","visibleEntityIds","useHeaderRowGenerator","stripeCell","useMemo","key","size","textAlign","idCell","nameCell","startCell","endCell","priceCell","quantityCell","soldCell","registrationsCell","actionsCell","filterState","displayStartOrEndDate","showBulkActions","cells","filter","Boolean","filterCellByStartOrEndDate","primary","type","useBodyRowGenerator","tickets","useTickets","findEntityByGuid","format","useTimeZoneTime","formatForSite","entityId","bgClassName","getTicketBackgroundColorClassName","shortenGuid","statusClassName","ticketStatus","classNames","showValueOnMobile","bulkActionCheckboxCell","parseISO","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","sold","cellsData","pipe","addZebraStripesOnMobile","validate","values","a","yupToFinalFormErrors","validationSchema","yup","min","unitOptions","intervalsToOptions","pick","DATE_INTERVALS","useBulkEditFormConfig","config","onSubmit","onSubmitFrom","form","restParams","adjacentFormItemProps","layout","debugFields","sections","icon","ProfileOutlined","fields","label","fieldType","CalendarOutlined","formControlProps","subFields","options","ControlOutlined","parseAsInfinity","max","useSubmitForm","onClose","useBulkEdit","getSelected","unSelectAll","allTickets","updateEntities","useBulkEditTickets","formData","input","formToBulkUpdateInput","EditDetails","isOpen","formConfig","warning","useOnDelete","areTrashedTickets","bulkDelete","useBulkDeleteTickets","entityIds","deletePermanently","Delete","onDelete","useConfirmationDialog","message","onConfirm","onCancel","confirmationDialog","onOpen","useEffect","EditModeButtons","setEditMode","onClickTogether","onClickSeparate","display","alignItems","justifyContent","height","buttonText","orientation","FooterButtons","onReset","fullWidth","horizontalAlign","topBordered","buttonType","ButtonType","PRIMARY","useOnSubmitPrices","useDataState","mutateTicket","useMutateTicket","getTicketPrices","useTicketPrices","deletePrices","useBulkDeletePrices","relatedPrices","reduce","nonDefaultPrices","isNotDefault","getGuids","Promise","all","map","isModified","withTPCContext","addDefaultPrices","useAddDefaultPrices","TPCInstance","setTPCState","getData","sprintf","useOnSubmit","getDataStates","submitPrices","Object","dataState","EditSeparately","dataStates","useRef","current","useManageTPCStates","ticketIds","Instance","EditPrices","useState","editMode","closeOnOverlayClick","action","setAction","useDisclosure","useTicketsListFilterState","status","isEditPricesDisabled","entitiesWithGuIdInArray","some","TicketsStatus","trashedOnly","disabled","onApply","show","Checkbox","defaultAction","SOLD_TICKET_ERROR_MESSAGE","variant","withBulkEdit","filteredTicketIds","useFilteredTicketIds","sortTickets","useReorderTickets","sortResponder","bodyRowGenerator","headerRowGenerator","domain","listId","ticketsList","onSort","tableCaption","tableId","require","_curry3","module","exports","_arity","_pipe","tail","arguments","length","Error","_isArray","methodname","fn","obj","apply","this","Array","prototype","slice","call","f","g","_checkForMethod","_curry1","Infinity","fromIndex","toIndex","list"],"mappings":"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","file":"static/js/tickets-table-view.167268e6.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default TicketRegistrationsLink;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, TextProps } from '@eventespresso/ui-components';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.quantity, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChange={onChange}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst tooltip = __('edit title…');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useLazyTicket, useTicketMutator } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => void;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\tconst getTicket = useLazyTicket();\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId, getTicket });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\t(ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData?.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst exitingBasePrice = getBasePrice(tpcData?.prices);\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tif (!exitingBasePrice) {\n\t\t\t\tconst newPrices = [\n\t\t\t\t\t// add the default price\n\t\t\t\t\t{ ...defaultBasePrice, order: 1, isNew: true },\n\t\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t\t// may be their taxation systen works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t\t...tpcData?.prices,\n\t\t\t\t];\n\t\t\t\ttpcData = { ...tpcData, prices: newPrices };\n\t\t\t}\n\t\t\t// get the list of updated prices with the amount of base price updated\n\t\t\tconst newPrices = calculateBasePrice(tpcData);\n\n\t\t\tmutatePrices(newPrices).then((relatedPriceIds) => {\n\t\t\t\tupdateTicket({\n\t\t\t\t\t// this is the ticket prices amount\n\t\t\t\t\tprice: ticketPrice,\n\t\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\t\treverseCalculate: true,\n\t\t\t\t\t// Make sure related prices are updated\n\t\t\t\t\tprices: relatedPriceIds,\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { Clickable } from '@eventespresso/adapters';\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { isLocked } from '@eventespresso/predicates';\nimport { useLockedTicketAction } from '@eventespresso/tpc';\n\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = parseFloat(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\tconst { alertContainer, showAlert } = useLockedTicketAction(ticket, 'COPY/TRASH');\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isTicketLocked = isLocked(ticket);\n\n\tconst tooltip = __('edit ticket total…');\n\n\treturn isTicketLocked ? (\n\t\t<Clickable as='div' onClick={showAlert}>\n\t\t\t<CurrencyDisplay className={className} value={ticket.price} />\n\t\t\t{alertContainer}\n\t\t</Clickable>\n\t) : (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { ActionCheckbox } from '@eventespresso/ee-components';\nimport { useVisibleTicketIds } from '@eventespresso/edtr-services';\nimport { withFeature } from '@eventespresso/services';\nimport type { ActionCheckboxProps } from '@eventespresso/ee-components';\n\nconst Checkbox: React.FC<ActionCheckboxProps> = (props) => {\n\tconst [visibleTicketIds] = useVisibleTicketIds();\n\n\treturn <ActionCheckbox {...props} visibleEntityIds={visibleTicketIds} />;\n};\n\nexport default withFeature('use_bulk_edit')(Checkbox);\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { filterCellByStartOrEndDate } from '@eventespresso/edtr-services';\n\nimport type { CellData } from '@eventespresso/ui-components';\nimport type { HeaderRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport Checkbox from './Checkbox';\n\ntype TicketsTableHeaderRowGen = HeaderRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useHeaderRowGenerator = (): TicketsTableHeaderRowGen => {\n\tconst stripeCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tclassName: 'ee-entity-list-status-stripe',\n\t\t\tkey: 'stripe',\n\t\t\tsize: 'nano',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: '',\n\t\t}),\n\t\t[]\n\t);\n\n\tconst idCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'id',\n\t\t\tsize: 'micro',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('ID'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst nameCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'name',\n\t\t\tsize: 'huge',\n\t\t\tvalue: __('Name'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst startCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'start',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Goes on Sale')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('On Sale')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst endCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'end',\n\t\t\tsize: 'default',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Sale Ends')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Ends')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst priceCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'price',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Price'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst quantityCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'quantity',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Quantity'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst soldCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'sold',\n\t\t\tsize: 'tiny',\n\t\t\ttextAlign: 'end',\n\t\t\tvalue: __('Sold'),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst registrationsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'registrations',\n\t\t\tsize: 'smaller',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Registrations')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Regs')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\tconst actionsCell: CellData = useMemo(\n\t\t() => ({\n\t\t\tkey: 'actions',\n\t\t\tsize: 'big',\n\t\t\ttextAlign: 'center',\n\t\t\tvalue: (\n\t\t\t\t<>\n\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>\n\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Actions')}</span>\n\t\t\t\t</>\n\t\t\t),\n\t\t}),\n\t\t[]\n\t);\n\n\treturn useCallback<TicketsTableHeaderRowGen>(\n\t\t(filterState) => {\n\t\t\tconst { displayStartOrEndDate, showBulkActions } = filterState;\n\n\t\t\tconst checkboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'checkbox',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: (\n\t\t\t\t\t<div className={'ee-rspnsv-table-hide-on-mobile'}>\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tcheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t];\n\n\t\t\tconst cells = cellsData\n\t\t\t\t.filter(\n\t\t\t\t\t// removes falsy values\n\t\t\t\t\tBoolean\n\t\t\t\t)\n\t\t\t\t.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: 'ee-editor-ticket-list-items-header-row',\n\t\t\t\tkey: 'ticket-header-row',\n\t\t\t\tprimary: true,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[\n\t\t\tidCell,\n\t\t\tactionsCell,\n\t\t\tendCell,\n\t\t\tnameCell,\n\t\t\tpriceCell,\n\t\t\tquantityCell,\n\t\t\tregistrationsCell,\n\t\t\tsoldCell,\n\t\t\tstartCell,\n\t\t\tstripeCell,\n\t\t]\n\t);\n};\n\nexport default useHeaderRowGenerator;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { parseISO } from 'date-fns';\nimport { filter, pipe } from 'ramda';\n\nimport { addZebraStripesOnMobile, CellData } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { filterCellByStartOrEndDate, useTickets } from '@eventespresso/edtr-services';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@eventespresso/constants';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport { getTicketBackgroundColorClassName, ticketStatus } from '@eventespresso/helpers';\nimport { findEntityByGuid } from '@eventespresso/predicates';\nimport { shortenGuid } from '@eventespresso/utils';\nimport type { EntityId } from '@eventespresso/data';\nimport type { BodyRowGeneratorFn } from '@eventespresso/ee-components';\nimport type { TicketsFilterStateManager } from '@eventespresso/edtr-services';\n\nimport TicketActionsMenu from '@edtrUI/tickets/ticketsList/actionsMenu/TicketActionsMenu';\nimport TicketQuantity from '../cardView/TicketQuantity';\nimport { EditableName } from '../editable';\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport Checkbox from './Checkbox';\n\ntype TicketsTableBodyRowGen = BodyRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useBodyRowGenerator = (): TicketsTableBodyRowGen => {\n\tconst tickets = useTickets();\n\tconst getTicket = useCallback((id: EntityId) => findEntityByGuid(tickets)(id), [tickets]);\n\tconst { formatForSite: format } = useTimeZoneTime();\n\n\treturn useCallback<TicketsTableBodyRowGen>(\n\t\t({ entityId, filterState }) => {\n\t\t\tconst ticket = getTicket(entityId);\n\t\t\tconst { displayStartOrEndDate, showBulkActions } = filterState;\n\n\t\t\tconst bgClassName = getTicketBackgroundColorClassName(ticket);\n\t\t\tconst id = ticket.dbId || shortenGuid(ticket.id);\n\t\t\tconst statusClassName = ticketStatus(ticket);\n\n\t\t\tconst stripeCell: CellData = {\n\t\t\t\tclassName: classNames('ee-entity-list-status-stripe', bgClassName),\n\t\t\t\tkey: 'stripe',\n\t\t\t\tshowValueOnMobile: true,\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: ticket.name,\n\t\t\t};\n\n\t\t\tconst bulkActionCheckboxCell: CellData = showBulkActions && {\n\t\t\t\tkey: 'cell',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <Checkbox dbId={ticket.dbId} id={ticket.id} />,\n\t\t\t};\n\n\t\t\tconst idCell: CellData = {\n\t\t\t\tkey: 'id',\n\t\t\t\tsize: 'micro',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: id,\n\t\t\t};\n\n\t\t\tconst nameCell: CellData = {\n\t\t\t\tclassName: 'ee-col-name ee-rspnsv-table-hide-on-mobile',\n\t\t\t\tkey: 'name',\n\t\t\t\tsize: 'huge',\n\t\t\t\tvalue: (\n\t\t\t\t\t<EditableName\n\t\t\t\t\t\tclassName={'ee-entity-list-text ee-focus-priority-5'}\n\t\t\t\t\t\tentity={ticket}\n\t\t\t\t\t\tview={'table'}\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst startCell: CellData = {\n\t\t\t\tkey: 'start',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(ticket.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst endCell: CellData = {\n\t\t\t\tkey: 'end',\n\t\t\t\tsize: 'default',\n\t\t\t\tvalue: format(parseISO(ticket.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t};\n\n\t\t\tconst priceCell: CellData = {\n\t\t\t\tkey: 'price',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <CurrencyDisplay value={ticket.price} />,\n\t\t\t};\n\n\t\t\tconst soldCell: CellData = {\n\t\t\t\tkey: 'sold',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: ticket.sold,\n\t\t\t};\n\n\t\t\tconst quantityCell: CellData = {\n\t\t\t\tclassName: 'ee-col__inline-edit',\n\t\t\t\tkey: 'quantity',\n\t\t\t\tsize: 'tiny',\n\t\t\t\ttextAlign: 'end',\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst registrationsCell: CellData = {\n\t\t\t\tkey: 'registrations',\n\t\t\t\tsize: 'smaller',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t};\n\n\t\t\tconst actionsCell: CellData = {\n\t\t\t\tkey: 'actions',\n\t\t\t\tsize: 'big',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tvalue: <TicketActionsMenu entity={ticket} />,\n\t\t\t};\n\n\t\t\tconst cellsData: Array<CellData> = [\n\t\t\t\tstripeCell,\n\t\t\t\tbulkActionCheckboxCell,\n\t\t\t\tidCell,\n\t\t\t\tnameCell,\n\t\t\t\tstartCell,\n\t\t\t\tendCell,\n\t\t\t\tpriceCell,\n\t\t\t\tquantityCell,\n\t\t\t\tsoldCell,\n\t\t\t\tregistrationsCell,\n\t\t\t\tactionsCell,\n\t\t\t].filter(\n\t\t\t\t// removes falsy values\n\t\t\t\tBoolean\n\t\t\t);\n\n\t\t\tconst exclude = ['row', 'stripe', 'name', 'actions'];\n\n\t\t\tconst cells = pipe(\n\t\t\t\tfilter(filterCellByStartOrEndDate(displayStartOrEndDate)),\n\t\t\t\taddZebraStripesOnMobile(exclude)\n\t\t\t)(cellsData);\n\n\t\t\treturn {\n\t\t\t\tcells,\n\t\t\t\tclassName: `ee-editor-date-list-view-row ${statusClassName}`,\n\t\t\t\tid: `ee-editor-date-list-view-row-${ticket.id}`,\n\t\t\t\tkey: `row-${ticket.id}`,\n\t\t\t\ttype: 'row',\n\t\t\t};\n\t\t},\n\t\t[format, getTicket]\n\t);\n};\n\nexport default useBodyRowGenerator;\n","import { __ } from '@eventespresso/i18n';\nimport * as yup from 'yup';\n\nimport { yupToFinalFormErrors } from '@eventespresso/form';\nimport { BulkEditFormShape } from './types';\n\nexport const validate = async (values: BulkEditFormShape): Promise<any> => {\n\treturn await yupToFinalFormErrors(validationSchema, values);\n};\n\nconst validationSchema = yup.object({\n\tname: yup.string().min(3, () => __('Name must be at least three characters')),\n});\n","import { useMemo, useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\nimport { pick } from 'ramda';\n\nimport { CalendarOutlined, ControlOutlined, ProfileOutlined } from '@eventespresso/icons';\nimport { intervalsToOptions, Intervals, DATE_INTERVALS } from '@eventespresso/dates';\nimport type { EspressoFormProps } from '@eventespresso/form';\n\nimport { validate } from './formValidation';\nimport type { BulkEditFormShape } from './types';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\ntype DateFormConfig = EspressoFormProps<BulkEditFormShape>;\n\nconst unitOptions = intervalsToOptions(\n\tpick<Intervals, keyof Intervals>(['months', 'weeks', 'days', 'hours', 'minutes'], DATE_INTERVALS),\n\ttrue\n);\n\nconst useBulkEditFormConfig = (config?: EspressoFormProps<BulkEditFormShape>): DateFormConfig => {\n\tconst { onSubmit } = config;\n\n\tconst onSubmitFrom: DateFormConfig['onSubmit'] = useCallback(\n\t\t(values, form, ...restParams) => {\n\t\t\treturn onSubmit(values, form, ...restParams);\n\t\t},\n\t\t[onSubmit]\n\t);\n\n\tconst adjacentFormItemProps = useMemoStringify({\n\t\tclassName: 'ee-form-item-pair',\n\t});\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\t...config,\n\t\t\tonSubmit: onSubmitFrom,\n\t\t\tvalidate,\n\t\t\tlayout: 'horizontal',\n\t\t\tdebugFields: ['values', 'errors'],\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tname: 'basics',\n\t\t\t\t\ticon: ProfileOutlined,\n\t\t\t\t\ttitle: __('Basics'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tlabel: __('Name'),\n\t\t\t\t\t\t\tfieldType: 'text',\n\t\t\t\t\t\t\tmin: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\t\tlabel: __('Description'),\n\t\t\t\t\t\t\tfieldType: 'simple-text-editor',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'dates',\n\t\t\t\t\ticon: CalendarOutlined,\n\t\t\t\t\ttitle: __('Dates'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'shiftDates',\n\t\t\t\t\t\t\tlabel: __('Shift dates'),\n\t\t\t\t\t\t\tfieldType: 'group',\n\t\t\t\t\t\t\tformControlProps: {\n\t\t\t\t\t\t\t\tclassName: 'shift-dates',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsubFields: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'unit',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: unitOptions,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\t\tfieldType: 'select',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('earlier'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'earlier',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: __('later'),\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'later',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'details',\n\t\t\t\t\ticon: ControlOutlined,\n\t\t\t\t\ttitle: __('Details'),\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'quantity',\n\t\t\t\t\t\t\tlabel: __('Quantity For Sale'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'uses',\n\t\t\t\t\t\t\tlabel: __('Number of Uses'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'min',\n\t\t\t\t\t\t\tlabel: __('Minimum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'max',\n\t\t\t\t\t\t\tlabel: __('Maximum Quantity'),\n\t\t\t\t\t\t\tfieldType: 'number',\n\t\t\t\t\t\t\tparseAsInfinity: true,\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t\tmax: 1000000,\n\t\t\t\t\t\t\tmin: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'isRequired',\n\t\t\t\t\t\t\tlabel: __('Required Ticket'),\n\t\t\t\t\t\t\tfieldType: 'switch',\n\t\t\t\t\t\t\tformControlProps: adjacentFormItemProps,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\t[adjacentFormItemProps, config, onSubmitFrom]\n\t);\n};\n\nexport default useBulkEditFormConfig;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useTickets, useBulkEditTickets, formToBulkUpdateInput } from '@eventespresso/edtr-services';\n\nimport type { BulkEditFormShape } from './types';\n\ntype Callback = (values: BulkEditFormShape) => void;\n\nconst useSubmitForm = (onClose: VoidFunction): Callback => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst allTickets = useTickets();\n\tconst { updateEntities } = useBulkEditTickets();\n\treturn useCallback<Callback>(\n\t\t(formData) => {\n\t\t\t// pull the shutter down\n\t\t\tonClose();\n\t\t\t// back to basics\n\t\t\tunSelectAll();\n\t\t\t// prepare mutation input from data\n\t\t\tconst input = formToBulkUpdateInput(formData, allTickets, getSelected());\n\t\t\t// do the thing\n\t\t\tupdateEntities(input);\n\t\t},\n\t\t[allTickets, getSelected, onClose, unSelectAll, updateEntities]\n\t);\n};\n\nexport default useSubmitForm;\n","import { __ } from '@eventespresso/i18n';\n\nimport { BulkEditDetails } from '@eventespresso/ee-components';\nimport useBulkEditFormConfig from './useBulkEditFormConfig';\nimport useSubmitForm from './useSubmitForm';\n\ntype EditDetailsProps = {\n\tisOpen: boolean;\n\tonClose: VoidFunction;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = ({ onClose, isOpen }) => {\n\tconst onSubmit = useSubmitForm(onClose);\n\tconst formConfig = useBulkEditFormConfig({ onSubmit });\n\n\treturn (\n\t\t<BulkEditDetails\n\t\t\tformConfig={formConfig}\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\ttitle={__('Bulk edit ticket details')}\n\t\t\twarning={__('any changes will be applied to ALL of the selected tickets.')}\n\t\t/>\n\t);\n};\n\nexport default EditDetails;\n","import { useCallback } from 'react';\n\nimport { useBulkEdit } from '@eventespresso/services';\nimport { useBulkDeleteTickets } from '@eventespresso/edtr-services';\n\nimport type { OnDeleteProps } from './types';\n\ntype OnDelete = (props: OnDeleteProps) => VoidFunction;\n\nconst useOnDelete: OnDelete = ({ areTrashedTickets, onClose }) => {\n\tconst { getSelected, unSelectAll } = useBulkEdit();\n\tconst bulkDelete = useBulkDeleteTickets();\n\treturn useCallback<VoidFunction>(() => {\n\t\t// pull the shutter down\n\t\tonClose();\n\t\t// back to basics\n\t\tunSelectAll();\n\n\t\t// goodbye folks :wave:\n\t\tbulkDelete({ entityIds: getSelected(), deletePermanently: areTrashedTickets });\n\t}, [areTrashedTickets, bulkDelete, getSelected, onClose, unSelectAll]);\n};\n\nexport default useOnDelete;\n","import { useEffect } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { useConfirmationDialog } from '@eventespresso/ui-components';\nimport useOnDelete from './useOnDelete';\nimport { OnDeleteProps } from './types';\n\nconst Delete: React.FC<OnDeleteProps> = ({ areTrashedTickets, onClose }) => {\n\tconst onDelete = useOnDelete({ areTrashedTickets, onClose });\n\n\tconst { confirmationDialog, onOpen } = useConfirmationDialog({\n\t\tmessage: areTrashedTickets\n\t\t\t? __('Are you sure you want to permanently delete these tickets? This action can NOT be undone!')\n\t\t\t: __('Are you sure you want to trash these tickets?'),\n\t\ttitle: areTrashedTickets ? __('Delete tickets permanently') : __('Trash tickets'),\n\t\tonConfirm: onDelete,\n\t\tonCancel: onClose,\n\t});\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseEffect(() => onOpen(), []);\n\n\treturn <>{confirmationDialog}</>;\n};\n\nexport default Delete;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { Button, Divider } from '@eventespresso/ui-components';\nimport { Box } from '@eventespresso/adapters';\nimport type { EditMode } from '../types';\n\nexport interface EditModeButtonsProps {\n\tsetEditMode: (editMode: EditMode) => void;\n}\n\nexport const EditModeButtons: React.FC<EditModeButtonsProps> = ({ setEditMode }) => {\n\tconst onClickTogether = useCallback(() => setEditMode('together'), [setEditMode]);\n\tconst onClickSeparate = useCallback(() => setEditMode('separate'), [setEditMode]);\n\n\treturn (\n\t\t<Box display='flex' alignItems='center' justifyContent='center' height='100%'>\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickTogether} buttonText={__('Edit all prices together')} />\n\t\t\t\t<p>{__('Edit all the selected ticket prices dynamically')}</p>\n\t\t\t</Box>\n\t\t\t<Divider orientation='vertical' />\n\t\t\t<Box>\n\t\t\t\t<Button onClick={onClickSeparate} buttonText={__('Edit prices individually')} />\n\t\t\t\t<p>{__('Edit prices for each ticket individually')}</p>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n","import { __ } from '@eventespresso/i18n';\n\nimport { Button, ButtonRow, ButtonType } from '@eventespresso/ui-components';\n\nexport interface FooterButtonsProps {\n\tonSubmit: VoidFunction;\n\tonReset?: VoidFunction;\n\tonCancel?: VoidFunction;\n}\n\nexport const FooterButtons: React.FC<FooterButtonsProps> = ({ onSubmit, onReset, onCancel }) => {\n\treturn (\n\t\t<ButtonRow fullWidth horizontalAlign='right' topBordered>\n\t\t\t{onReset && <Button buttonText={__('Reset')} onClick={onReset} type='reset' />}\n\t\t\t{onCancel && <Button buttonText={__('Cancel')} onClick={onCancel} />}\n\t\t\t<Button buttonText={__('Submit')} buttonType={ButtonType.PRIMARY} onClick={onSubmit} type='submit' />\n\t\t</ButtonRow>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { Price, useTicketPrices, useBulkDeletePrices } from '@eventespresso/edtr-services';\nimport { useDataState, useMutateTicket } from '@eventespresso/tpc';\nimport { isNotDefault, getGuids } from '@eventespresso/predicates';\nimport { useBulkEdit } from '@eventespresso/services';\n\nconst useOnSubmitPrices = (onClose: VoidFunction): (() => Promise<void>) => {\n\tconst { prices, ticket } = useDataState();\n\tconst { getSelected } = useBulkEdit();\n\n\tconst mutateTicket = useMutateTicket();\n\n\tconst getTicketPrices = useTicketPrices();\n\n\tconst deletePrices = useBulkDeletePrices();\n\n\t// Async to make sure that prices are handled before updating the ticket.\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// prices related to all the selected tickets\n\t\tconst relatedPrices = getSelected().reduce<Price[]>(\n\t\t\t(prices, ticketId) => [...prices, ...getTicketPrices(ticketId)],\n\t\t\t[]\n\t\t);\n\n\t\t// prices may contain default taxes,\n\t\t// we need to make sure they are not deleted.\n\t\tconst nonDefaultPrices = relatedPrices.filter(isNotDefault);\n\t\t// delete all non-default prices\n\t\tawait deletePrices(getGuids(nonDefaultPrices));\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update thei price information\n\t\t\tgetSelected().map(async (ticketId) => {\n\t\t\t\tawait mutateTicket({\n\t\t\t\t\t...ticket,\n\t\t\t\t\tid: ticketId,\n\t\t\t\t\tisModified: true,\n\t\t\t\t\tprices,\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}, [deletePrices, getSelected, getTicketPrices, mutateTicket, onClose, prices, ticket]);\n};\n\nexport default useOnSubmitPrices;\n","import { useEffect } from 'react';\n\nimport { TicketPriceCalculator, useAddDefaultPrices, withContext as withTPCContext } from '@eventespresso/tpc';\n\nimport { FooterButtons } from '../buttons';\nimport { EditPricesBaseProps } from '../types';\nimport useOnSubmitPrices from './useOnSubmitPrices';\n\nconst EditTogether: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst addDefaultPrices = useAddDefaultPrices();\n\t// add default prices on mount\n\tuseEffect(() => {\n\t\taddDefaultPrices();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst onSubmit = useOnSubmitPrices(onClose);\n\n\treturn (\n\t\t<>\n\t\t\t<TicketPriceCalculator />\n\t\t\t<FooterButtons onSubmit={onSubmit} onReset={addDefaultPrices} />\n\t\t</>\n\t);\n};\n\nexport default withTPCContext(EditTogether, { ticketId: '' });\n","import { useEffect } from 'react';\n\nimport { __, sprintf } from '@eventespresso/i18n';\n\nimport { TicketPriceCalculator, useDataState } from '@eventespresso/tpc';\nimport { ManageTPCStates } from './useManageTPCStates';\n\nexport interface TPCInstanceProps {\n\tsetTPCState: ManageTPCStates['setTPCState'];\n}\n\nexport const TPCInstance: React.FC<TPCInstanceProps> = ({ setTPCState }) => {\n\tconst { ticket, getData } = useDataState();\n\n\tuseEffect(() => {\n\t\tsetTPCState(getData());\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [getData]);\n\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t{sprintf(\n\t\t\t\t\t/* translators: %s ticket name */\n\t\t\t\t\t__('Edit prices for Ticket: %s'),\n\t\t\t\t\tticket.name\n\t\t\t\t)}\n\t\t\t</header>\n\t\t\t<TicketPriceCalculator />\n\t\t</>\n\t);\n};\n","import { useCallback } from 'react';\n\nimport { useOnSubmitPrices } from '@eventespresso/tpc';\nimport { ManageTPCStates } from './useManageTPCStates';\n\nconst useOnSubmit = (onClose: VoidFunction, getDataStates: ManageTPCStates['getDataStates']): (() => Promise<void>) => {\n\tconst submitPrices = useOnSubmitPrices();\n\n\treturn useCallback(async () => {\n\t\t// lower down the curtains\n\t\tonClose();\n\n\t\t// tickets/prices can be mutated in parallel\n\t\tawait Promise.all(\n\t\t\t// loop through all the selected tickets and update their price information\n\t\t\tObject.values(getDataStates()).map(async (dataState) => {\n\t\t\t\t// Finally update the ticket and its price relation\n\t\t\t\tawait submitPrices(dataState);\n\t\t\t})\n\t\t);\n\t}, [getDataStates, onClose, submitPrices]);\n};\n\nexport default useOnSubmit;\n","import { withContext as withTPCContext } from '@eventespresso/tpc';\nimport { useBulkEdit } from '@eventespresso/services';\n\nimport { EditPricesBaseProps } from '../types';\nimport { TPCInstance } from './TPCInstance';\nimport { FooterButtons } from '../buttons';\nimport { useManageTPCStates } from './useManageTPCStates';\nimport useOnSubmit from './useOnSubmit';\n\nconst EditSeparately: React.FC<EditPricesBaseProps> = ({ onClose }) => {\n\tconst { getSelected } = useBulkEdit();\n\n\tconst { getDataStates, setTPCState } = useManageTPCStates();\n\n\tconst onSubmit = useOnSubmit(onClose, getDataStates);\n\n\tconst ticketIds = getSelected();\n\n\treturn (\n\t\t<>\n\t\t\t{ticketIds.map<React.ReactNode>((ticketId) => {\n\t\t\t\tconst Instance = withTPCContext(TPCInstance, { ticketId });\n\t\t\t\treturn <Instance key={ticketId} setTPCState={setTPCState} />;\n\t\t\t})}\n\t\t\t<FooterButtons onSubmit={onSubmit} onCancel={onClose} />\n\t\t</>\n\t);\n};\n\nexport default EditSeparately;\n","import { useCallback, useMemo, useRef } from 'react';\n\nimport { DataState } from '@eventespresso/tpc';\nimport { AnyObject } from '@eventespresso/utils';\n\nexport interface ManageTPCStates {\n\tsetTPCState: (dataState: DataState) => void;\n\tgetDataStates: () => AnyObject<DataState>;\n}\n\nexport const useManageTPCStates = (): ManageTPCStates => {\n\t/**\n\t * This contains the data for all TPC instances.\n\t *\n\t * Since this is not used anywhere in the view, rather only used on final submission\n\t * useRef is made for this, to avoid any unnecessary re-renders\n\t */\n\tconst dataStates = useRef<AnyObject<DataState>>({});\n\n\tconst setTPCState = useCallback<ManageTPCStates['setTPCState']>(\n\t\t(dataState) => {\n\t\t\tdataStates.current = { ...dataStates.current, [dataState?.ticket?.id]: dataState };\n\t\t},\n\t\t[dataStates]\n\t);\n\n\tconst getDataStates = useCallback<ManageTPCStates['getDataStates']>(() => dataStates.current, [dataStates]);\n\n\treturn useMemo(() => ({ setTPCState, getDataStates }), [setTPCState, getDataStates]);\n};\n","import { useState } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { EntityEditModal } from '@eventespresso/ui-components';\nimport { EditModeButtons } from './buttons';\nimport { EditTogether } from './editTogether';\nimport { EditSeparately } from './editSeparately';\nimport type { EditMode, EditPricesBaseProps } from './types';\n\nconst EditPrices: React.FC<EditPricesBaseProps> = ({ onClose, isOpen }) => {\n\tconst [editMode, setEditMode] = useState<EditMode>();\n\n\treturn (\n\t\t<EntityEditModal\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t\tcloseOnOverlayClick={true}\n\t\t\ttitle={__('Bulk edit ticket prices')}\n\t\t>\n\t\t\t{!editMode && <EditModeButtons setEditMode={setEditMode} />}\n\t\t\t{editMode === 'together' && <EditTogether onClose={onClose} />}\n\t\t\t{editMode === 'separate' && <EditSeparately onClose={onClose} />}\n\t\t</EntityEditModal>\n\t);\n};\n\nexport default EditPrices;\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { BulkActions } from '@eventespresso/ee-components';\nimport { Collapsible, ErrorMessage } from '@eventespresso/ui-components';\nimport { useDisclosure, useMemoStringify } from '@eventespresso/hooks';\nimport { useTickets, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { SOLD_TICKET_ERROR_MESSAGE } from '@eventespresso/tpc';\nimport { entitiesWithGuIdInArray, TicketsStatus } from '@eventespresso/predicates';\nimport { withFeature, useBulkEdit } from '@eventespresso/services';\nimport type { BulkActionsProps } from '@eventespresso/ui-components';\n\nimport Checkbox from '../../tableView/Checkbox';\nimport { EditDetails } from '../details';\nimport { Delete } from '../delete';\nimport { EditPrices } from '../prices';\n\ntype Action = 'edit-details' | 'delete' | 'edit-prices' | '';\n\nconst Actions: React.FC = () => {\n\tconst [action, setAction] = useState<Action>('');\n\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst { status, showBulkActions } = useTicketsListFilterState();\n\tconst { getSelected } = useBulkEdit();\n\tconst allTickets = useTickets();\n\n\tconst isEditPricesDisabled = useMemo(() => {\n\t\tconst selectedTickets = entitiesWithGuIdInArray(allTickets, getSelected());\n\t\tconst isSoldTicketSelected = selectedTickets.some((ticket) => Boolean(ticket.sold));\n\t\treturn isSoldTicketSelected;\n\t}, [allTickets, getSelected]);\n\n\tconst areTrashedTickets = status === TicketsStatus.trashedOnly;\n\n\tconst options = useMemoStringify([\n\t\t{\n\t\t\tvalue: '',\n\t\t\tlabel: __('bulk actions'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-details',\n\t\t\tlabel: __('edit ticket details'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'delete',\n\t\t\tlabel: areTrashedTickets ? __('delete tickets') : __('trash tickets'),\n\t\t},\n\t\t{\n\t\t\tvalue: 'edit-prices',\n\t\t\tlabel: __('edit ticket prices'),\n\t\t\tdisabled: isEditPricesDisabled,\n\t\t},\n\t]);\n\n\tconst onApply = useCallback<BulkActionsProps<Action>['onApply']>(\n\t\t(action) => {\n\t\t\tsetAction(action);\n\t\t\tonOpen();\n\t\t},\n\t\t[onOpen]\n\t);\n\n\treturn (\n\t\t<Collapsible show={showBulkActions}>\n\t\t\t<BulkActions\n\t\t\t\tCheckbox={Checkbox}\n\t\t\t\tdefaultAction=''\n\t\t\t\tid={'ee-bulk-edit-tickets-actions'}\n\t\t\t\tonApply={isEditPricesDisabled ? null : onApply}\n\t\t\t\toptions={options}\n\t\t\t/>\n\t\t\t{isOpen && (\n\t\t\t\t<>\n\t\t\t\t\t{action === 'edit-details' && <EditDetails isOpen={true} onClose={onClose} />}\n\t\t\t\t\t{action === 'delete' && <Delete areTrashedTickets={areTrashedTickets} onClose={onClose} />}\n\t\t\t\t\t{action === 'edit-prices' && <EditPrices isOpen={true} onClose={onClose} />}\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<ErrorMessage message={isEditPricesDisabled && SOLD_TICKET_ERROR_MESSAGE} variant='subtle' />\n\t\t</Collapsible>\n\t);\n};\n\nexport default withFeature('use_bulk_edit')(Actions);\n","import { __ } from '@eventespresso/i18n';\n\nimport { EntityTable } from '@eventespresso/ee-components';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport {\n\tticketsList,\n\tdomain,\n\tuseFilteredTicketIds,\n\tuseReorderTickets,\n\tuseTicketsListFilterState,\n} from '@eventespresso/edtr-services';\nimport { withBulkEdit } from '@eventespresso/services';\nimport { Actions as BulkEditActions } from '../bulkEdit';\n\n/**\n * Displays tickets in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst filterState = useTicketsListFilterState();\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\tconst { sortResponder: sortTickets } = useReorderTickets(filteredTicketIds);\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<>\n\t\t\t<BulkEditActions />\n\t\t\t<EntityTable\n\t\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\t\tdomain={domain}\n\t\t\t\tentityIds={filteredTicketIds}\n\t\t\t\tfilterState={filterState}\n\t\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\t\tlistId={ticketsList}\n\t\t\t\tonSort={sortTickets}\n\t\t\t\ttableCaption={__('Tickets')}\n\t\t\t\ttableId='ticket-entities-table-view'\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default withBulkEdit(TableView);\n","var _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n\nvar _reduce =\n/*#__PURE__*/\nrequire(\"./internal/_reduce\");\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\n\n\nvar reduce =\n/*#__PURE__*/\n_curry3(_reduce);\n\nmodule.exports = reduce;","var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _pipe =\n/*#__PURE__*/\nrequire(\"./internal/_pipe\");\n\nvar reduce =\n/*#__PURE__*/\nrequire(\"./reduce\");\n\nvar tail =\n/*#__PURE__*/\nrequire(\"./tail\");\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\n\n\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}\n\nmodule.exports = pipe;","var _isArray =\n/*#__PURE__*/\nrequire(\"./_isArray\");\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n\nmodule.exports = _checkForMethod;","function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}\n\nmodule.exports = _pipe;","var _checkForMethod =\n/*#__PURE__*/\nrequire(\"./internal/_checkForMethod\");\n\nvar _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n\nvar slice =\n/*#__PURE__*/\nrequire(\"./slice\");\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\n\n\nvar tail =\n/*#__PURE__*/\n_curry1(\n/*#__PURE__*/\n_checkForMethod('tail',\n/*#__PURE__*/\nslice(1, Infinity)));\n\nmodule.exports = tail;","var _checkForMethod =\n/*#__PURE__*/\nrequire(\"./internal/_checkForMethod\");\n\nvar _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\n\n\nvar slice =\n/*#__PURE__*/\n_curry3(\n/*#__PURE__*/\n_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\nmodule.exports = slice;"],"sourceRoot":""}