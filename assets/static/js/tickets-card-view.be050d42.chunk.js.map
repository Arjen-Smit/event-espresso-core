{"version":3,"sources":["../domains/core/admin/eventEditor/src/ui/tickets/TicketRegistrationsLink.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/core/admin/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/Details.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCardSidebar.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCard.tsx","../domains/core/admin/eventEditor/src/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["TicketRegistrationsLink","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","count","registrationCount","emphasizeZero","title","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","data-testid","value","EditableName","className","testid","view","lineCount","onChangeName","name","ticketName","tag","useRecalculateBasePrice","ticketId","getTicket","useLazyTicket","getTicketPrices","useTicketPrices","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","a","tpcData","updatedTicket","price","existingBasePrice","getBasePrice","prices","priceModifiers","getPriceModifiers","newBasePriceAmount","calculateBasePrice","newBasePrice","isModified","order","isNew","newPrices","amount","relatedPriceIds","reverseCalculate","EditablePrice","useMoneyDisplay","afterAmount","beforeAmount","formatAmount","recalculateBasePrice","onChangePrice","Math","abs","useLockedTicketAction","alertContainer","showAlert","wrapperProps","useMemoStringify","isTicketLocked","isLocked","as","onClick","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","TicketDetailsPanel","adminUrl","eventId","details","useMemo","label","sold","type","Details","siteUrl","useConfig","getAdminUrl","adminSiteUrl","admin","page","ADMIN_ROUTES","REGISTRATIONS","useEventId","onUpdate","description","additionalProps","hooks","applyFilters","EMPTY_OBJECT","text","TicketCardSidebar","displayStartOrEndDate","useTicketsListFilterState","siteTimeToUtc","useTimeZoneTime","start","end","startDate","toISOString","endDate","statusText","getTicketStatusTextLabel","displayDate","header","popoverPlacement","TicketCard","useTicketItem","bgClassName","ticketStatusBgColorClassName","actionsMenu","layout","EntityActionsMenuLayout","Vertical","reverse","sidebar","sidebarClass","CardView","filteredTicketIds","useFilteredTicketIds","EntityCard","entityIds"],"mappings":"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","file":"static/js/tickets-card-view.be050d42.chunk.js","sourcesContent":["import { __ } from '@eventespresso/i18n';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/ui-components';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default TicketRegistrationsLink;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, InlineEditProps } from '@eventespresso/ui-components';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: InlineEditProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.quantity, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tdata-testid='ee-ticket-inline-qty'\n\t\t\tonChange={onChange}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/ui-components';\n\ninterface EditableNameProps extends TicketItemProps {\n\t'data-testid'?: string;\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({\n\tclassName,\n\t'data-testid': testid,\n\tentity: ticket,\n\tview = 'card',\n}) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst tooltip = __('edit title…');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tdata-testid={testid}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice, getPriceModifiers } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useLazyTicket, useTicketMutator, useTicketPrices } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => Promise<void>;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\tconst getTicket = useLazyTicket();\n\tconst getTicketPrices = useTicketPrices();\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId, getTicket, getTicketPrices });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\tasync (ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst existingBasePrice = getBasePrice(tpcData.prices);\n\t\t\tconst priceModifiers = getPriceModifiers(tpcData.prices);\n\t\t\t// get the updated base price amount\n\t\t\tconst newBasePriceAmount = calculateBasePrice(tpcData.ticket?.price, tpcData.prices);\n\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tconst newBasePrice = existingBasePrice\n\t\t\t\t? // add the exiting base price\n\t\t\t\t  { ...existingBasePrice, isModified: true }\n\t\t\t\t: // add the default price\n\t\t\t\t  { ...defaultBasePrice, order: 1, isNew: true };\n\n\t\t\tconst newPrices = [\n\t\t\t\t// update the base price amount\n\t\t\t\t{ ...newBasePrice, amount: newBasePriceAmount },\n\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t// may be their taxation systen works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t...priceModifiers,\n\t\t\t];\n\n\t\t\tconst relatedPriceIds = await mutatePrices(newPrices);\n\n\t\t\tawait updateTicket({\n\t\t\t\t// this is the ticket prices amount\n\t\t\t\tprice: ticketPrice,\n\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\treverseCalculate: true,\n\t\t\t\t// Make sure related prices are updated\n\t\t\t\tprices: relatedPriceIds,\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\nimport { Clickable } from '@eventespresso/adapters';\nimport { InlineEditCurrency } from '@eventespresso/ui-components';\nimport { CurrencyDisplay } from '@eventespresso/ee-components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { useMoneyDisplay } from '@eventespresso/services';\nimport { isLocked } from '@eventespresso/predicates';\nimport { useLockedTicketAction } from '@eventespresso/tpc';\n\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\nimport './style.scss';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst { afterAmount, beforeAmount, formatAmount } = useMoneyDisplay();\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = Math.abs(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\tconst { alertContainer, showAlert } = useLockedTicketAction(ticket, 'COPY/TRASH');\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isTicketLocked = isLocked(ticket);\n\n\tconst tooltip = __('edit ticket total…');\n\n\treturn isTicketLocked ? (\n\t\t<Clickable as='div' className='ee-ticket-editable-price' onClick={showAlert}>\n\t\t\t<CurrencyDisplay className={className} value={ticket.price} />\n\t\t\t{alertContainer}\n\t\t</Clickable>\n\t) : (\n\t\t<InlineEditCurrency\n\t\t\tafterAmount={afterAmount}\n\t\t\tamount={ticket.price}\n\t\t\tbeforeAmount={beforeAmount}\n\t\t\tformatAmount={formatAmount}\n\t\t\tid={ticket.id}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import { EntityActionsMenu } from '@eventespresso/ui-components';\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport type { Ticket } from '@eventespresso/edtr-services';\n\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import { useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport { EntityDetailsPanel, EntityDetailsPanelSold } from '@eventespresso/ui-components';\nimport TicketQuantity from './TicketQuantity';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = ({ adminUrl, entity: ticket, eventId }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: (\n\t\t\t\t\t<EntityDetailsPanelSold\n\t\t\t\t\t\tadminUrl={adminUrl}\n\t\t\t\t\t\tdbId={ticket.dbId}\n\t\t\t\t\t\teventId={eventId}\n\t\t\t\t\t\tsold={ticket.sold}\n\t\t\t\t\t\ttype='ticket'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-qty',\n\t\t\t\tlabel: __('quantity'),\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-registrations',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t},\n\t\t],\n\t\t[adminUrl, eventId, ticket]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n};\n\nexport default TicketDetailsPanel;\n","import { useCallback, useMemo } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { ADMIN_ROUTES, EMPTY_OBJECT } from '@eventespresso/constants';\nimport { SimpleTextEditorModal } from '@eventespresso/ee-components';\nimport { useConfig } from '@eventespresso/services';\nimport { getAdminUrl, useTicketMutator, useEventId, hooks } from '@eventespresso/edtr-services';\n\nimport { EditableName, EditablePrice } from '../editable';\nimport TicketDetailsPanel from './TicketDetailsPanel';\n\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { siteUrl } = useConfig();\n\n\tconst adminUrl = useMemo(() => {\n\t\treturn getAdminUrl({ adminSiteUrl: siteUrl.admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\t}, [siteUrl.admin]);\n\n\tconst eventId = useEventId();\n\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\tconst additionalProps = useMemo(() => {\n\t\treturn hooks.applyFilters('eventEditor.tickets.inlineDescriptionProps', EMPTY_OBJECT, ticket);\n\t}, [ticket]);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<SimpleTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={ticket.description}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('edit description…')}\n\t\t\t\t{...additionalProps}\n\t\t\t/>\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel adminUrl={adminUrl} entity={ticket} eventId={eventId} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import { useCallback } from 'react';\n\nimport { __ } from '@eventespresso/i18n';\n\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/ee-components';\nimport { getTicketStatusTextLabel } from '@eventespresso/helpers';\nimport { useTicketMutator, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCardSidebar: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onChange = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getTicketStatusTextLabel(ticket);\n\n\treturn ticket ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\theader={__('Edit Ticket Sale Dates')}\n\t\t\t\tonChange={onChange}\n\t\t\t\tpopoverPlacement='left-end'\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t\ttooltip={__('edit ticket sales start and end dates')}\n\t\t\t/>\n\t\t\t<div className='ee-entity-status-label'>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default TicketCardSidebar;\n","import { EntityActionsMenuLayout } from '@eventespresso/ui-components';\nimport { EntityCard } from '@eventespresso/ui-components';\nimport { ticketStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useTicketItem } from '@eventespresso/edtr-services';\n\nimport Details from './Details';\nimport TicketCardSidebar from './TicketCardSidebar';\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ id }) => {\n\tconst ticket = useTicketItem({ id });\n\tconst bgClassName = ticketStatusBgColorClassName(ticket);\n\n\treturn ticket ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tdetails={<Details entity={ticket} />}\n\t\t\tentity={ticket}\n\t\t\treverse\n\t\t\tsidebar={<TicketCardSidebar entity={ticket} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default TicketCard;\n","import { EntityCardList } from '@eventespresso/ui-components';\nimport { useFilteredTicketIds } from '@eventespresso/edtr-services';\n\nimport TicketCard from './TicketCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\treturn <EntityCardList EntityCard={TicketCard} entityIds={filteredTicketIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}